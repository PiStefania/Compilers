Εργασία Μεταγλωττιστών
Μέρος 1ο 

Στην εργασία αυτή κληθήκαμε να υλοποιήσουμε τον λεκτικό και συντακτικό αναλυτή για τη γλώσσα Grace. Επιλέξαμε τη γλώσσα Java και για την εκτέλεση του προγράμματος επιλέξαμε παραγωγή Java bytecode και διερμηνεία αυτού στη JavaVM. Το εργαλείο που χρησιμοποιήσαμε είναι το SableCC.
Στο αρχείο «parser.grammar» δημιουργήσαμε helpers, tokens, ignored tokens και productions. Σε ένα αρχείο «Printer.java» υλοποιήσαμε μια κλάση Printer και τις συναρτήσεις της, με τις οποίες εκτυπώσαμε και το CST  που δημιουργήθηκε. Εκτυπώσαμε τα δεδομένα που ανήκουν σε ένα node το οποίο παράγεται από τα productions επιλεκτικά. Για παράδειγμα στη συνάρτηση inAProgram  εκτυπώνεται μόνο η λέξη Program μαζί με μια αριστερή παρένθεση ‘(‘ , ενώ στην outAProgram εκτυπώνεται η δεξιά παρένθεση ‘)‘. Αυτό, καθώς και η προσθήκη κενών ‘ ‘  (indentation) αποσκοπεί στην καλύτερη κατανόηση των ορίων του κάθε κόμβου. Στη συνάρτηση main, καλείται η κλάση Printer, για την εκτύπωση του δέντρου.
  
Σχόλια

• Δεν εμφανίζουμε ονομασίες ορισμένων τύπων κόμβων, καθώς τις θεωρούμε αυτονόητες (π.χ το DataType υπάρχει σχολιασμένο στις συναρτήσεις που αφορούν τους DataType κόμβους, αφού μπορεί να εκτυπώνεται το «Type»). 

Μεταγλώττιση της εργασίας

• Για τη μεταγλώττιση της εργασίας, χρησιμοποιήσαμε το εργαλείο maven που παρέχεται από το πρόγραμμα IntelliJ IDEA.
• Κάνουμε import,  από το φάκελο Skeleton.java,  το αρχείο pom.xml.
• Μεταγλωττίζουμε το πρόγραμμα με τις επιλογές clean (διαγραφή generated  αρχείων) και compile (build -> δημιουργία generated  αρχείων) του προγράμματος IntelliJ IDEA από το παράθυρο Maven Projects.


Εκτέλεση Αρχείου

• Επιλέγουμε την Main.java ως προεπιλεγμένη main του project μας.
• Για την εκτέλεση αρχείου απαιτείται η εισαγωγή κάποιου προγράμματος είτε με System.in είτε με ολοκληρωμένο path.


Εκτέλεση Παραδειγμάτων

Hello World
([Program]
 ([Function Definition]
  ([Header] fun [id] hello ( ) : ([Return Data Type] nothing ))

  ([Block] 
   { 
    ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: "Hello world!\n" ) ) ) ); )

   } 
  )
 )
)


Reverse
([Program]
 ([Function Definition]
  ([Header] fun [id] main ( ) : ([Return Data Type] nothing ))
  ([Local Definition]
   ([Variable Definition] var [id] r : ([Type] char[32] ); )
  )
  ([Local Definition]
   ([Function Definition]
    ([Header] fun [id] reverse ( ([Function Parameters Definition] ref [id] s : [Function Parameter Type] char[] ))) : ([Return Data Type] nothing ))
    ([Local Definition]
     ([Variable Definition] var [id] i , [id] l : ([Type] int )); )
    )

    ([Block] 
     { 
      ([Statement] ([L-Value] [id] l ) [Assignment] <- ([Expression] ([Function Call][id] strlen ( ([Expression] ([L-Value] [id] s ) ) ) )) ; )
      ([Statement] ([L-Value] [id] i ) [Assignment] <- ([Expression] [Constant]: 0 ) ; )
      ([Statement] while ([Expression] ([L-Value] [id] i ) ) [Smaller] < ([Expression] ([L-Value] [id] l ) ) do 
       ([Statement] 
        ([Block] 
         { 
          ([Statement] ([L-Value] ([L-Value] [id] r ) [ ([Expression] ([L-Value] [id] i ) ) ] ) [Assignment] <- ([Expression] ([L-Value] ([L-Value] [id] s ) [ ([Expression] ((([L-Value] [id] l ) [Minus] - ([L-Value] [id] i ) )[Minus] - [Constant]: 1 )) ] ) ) ; )
          ([Statement] ([L-Value] [id] i ) [Assignment] <- ([Expression] (([L-Value] [id] i ) [Plus] + [Constant]: 1 )) ; )

         } 
        )
       )
      )
      ([Statement] ([L-Value] ([L-Value] [id] r ) [ ([Expression] ([L-Value] [id] i ) ) ] ) [Assignment] <- ([Expression] [Constant character]: '\0' ) ; )

     } 
    )
   )
  )

  ([Block] 
   { 
    ([Statement] ([Function Call][id] reverse ( ([Expression] ([L-Value] [Constant String]: "\n!dlrow olleH" ) ) ) ); )
    ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [id] r ) ) ) ); )

   } 
  )
 )
)


Hanoi
([Program]
 ([Function Definition]
  ([Header] fun [id] solve ( ) : ([Return Data Type] nothing ))
  ([Local Definition]
   ([Function Definition]
    ([Header] fun [id] hanoi ( ([Function Parameters Definition] [id] rings : ([Function Parameter Type] int ))); ([Function Parameters Definition] ref [id] source , [id] target , [id] auxiliary : [Function Parameter Type] char[] ))) : ([Return Data Type] nothing ))
    ([Local Definition]
     ([Function Definition]
      ([Header] fun [id] move ( ([Function Parameters Definition] ref [id] source , [id] target : [Function Parameter Type] char[] ))) : ([Return Data Type] nothing ))

      ([Block] 
       { 
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: "Moving from " ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [id] source ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: " to " ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [id] target ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: ".\n" ) ) ) ); )

       } 
      )
     )
    )

    ([Block] 
     { 
      ([Statement] if ([Expression] ([L-Value] [id] rings ) ) [Greater or Equal] >= ([Expression] [Constant]: 1 ) then 
       ([Statement] 
        ([Block] 
         { 
          ([Statement] ([Function Call][id] hanoi ( ([Expression] (([L-Value] [id] rings ) [Minus] - [Constant]: 1 )) , ([Expression] ([L-Value] [id] source ) ) , ([Expression] ([L-Value] [id] auxiliary ) ) , ([Expression] ([L-Value] [id] target ) ) ) ); )
          ([Statement] ([Function Call][id] move ( ([Expression] ([L-Value] [id] source ) ) , ([Expression] ([L-Value] [id] target ) ) ) ); )
          ([Statement] ([Function Call][id] hanoi ( ([Expression] (([L-Value] [id] rings ) [Minus] - [Constant]: 1 )) , ([Expression] ([L-Value] [id] auxiliary ) ) , ([Expression] ([L-Value] [id] target ) ) , ([Expression] ([L-Value] [id] source ) ) ) ); )

         } 
        )
       )
      )

     } 
    )
   )
  )
  ([Local Definition]
   ([Variable Definition] var [id] NumberOfRings : ([Type] int )); )
  )

  ([Block] 
   { 
    ([Statement] ([Function Call][id] writeString ( ([Expression] ([L-Value] [Constant String]: "Rings: " ) ) ) ); )
    ([Statement] ([L-Value] [id] NumberOfRings ) [Assignment] <- ([Expression] ([Function Call][id] geti ( ) ) )) ; )
    ([Statement] ([Function Call][id] hanoi ( ([Expression] ([L-Value] [id] NumberOfRings ) ) , ([Expression] ([L-Value] [Constant String]: "left" ) ) , ([Expression] ([L-Value] [Constant String]: "right" ) ) , ([Expression] ([L-Value] [Constant String]: "middle" ) ) ) ); )

   } 
  )
 )
)


Μέρος 2ο

Στην εργασία αυτή κληθήκαμε να ολοκληρώσουμε την σημασιολογική ανάλυση και τον ενδιάμεσο κώδικα για τη γλώσσα Grace. Αρχικά, δημιουργήσαμε το δέντρο AST, χρησιμοποιώντας τα productions από το πρώτο μέρος.
Επιλέξαμε τους κόμβους που μας χρειάστηκαν για τον σημασιολογικό έλεγχο με βάση την σωστή σύνταξη AST. Στην συνέχεια, μέσα στους In και Out κόμβους που δημιουργήθηκαν, υλοποίησαμε τον σημασιολογικό έλεγχο αλλά και τον ενδιάμεσο κώδικα.

Για την σημασιολογική ανάλυση, δημιουργήσαμε την κλάση SymbolTable.java η οποία έχει τις παρακάτω λειτουργίες (περιλαμβάνονται μόνο αυτές που χρησιμοποιούνται):

• Εκτύπωση κεντρικής στοίβας με την συνάρτηση : print
• Δημιουργία νέας εμβέλειας και εισαγωγή αντικειμένου με την συνάρτηση : enter
• Εισαγωγή αντικειμένου στην ίδια εμβέλεια με την συνάρτηση : insert
• Αναζήτηση αντεικειμένου με παράμετρο το όνομά του στην ίδια εμβέλεια με την συνάρτηση : lookupVar
• Αναζήτηση παραμέτρων σε δήλωση συνάρτησης με την συνάρτηση : lookupPar
• Αναζήτηση δήλωσης και κλήσης συνάρτησης με την συνάρτηση : lookupDecl
• Αναζήτηση ίδιας συνάρτησης στην στοίβα με την συνάρτηση : lookupFunc
• Αναζήτηση ίδιας συνάρτησης ή μεταβλητής σε όλη την στοίβα με την συνάρτηση : lookupVarAndFunc
• Αναζήτηση μεταβλητής με ίδιο όνομα και διαφορετικό τύπο στην στοίβα με την συνάρτηση : lookupVarAndType
• Αναζήτηση τύπου μεταβλητής στην στοίβα με την συνάρτηση : FindVariableType
• Αναζήτηση μεταβλητής στην στοίβα έτσι ώστε να επιστρέψουμε την θέση του σε αυτήν με την συνάρτηση : FindVarPosition
• Αναζήτηση δήλωσης συνάρτησης ώστε έτσι οι παράμετροι να αλλάξουν από "par" σε "par_decl" με την συνάρτηση : findDecl
• Διαγραφή εμβελειών με την συνάρτηση : exit
• Εισαγωγή αντικειμένου στην στοίβα συναρτήσεων με την συνάρτηση : insertFuncStack
• Εκτύπωση στοίβας που περιλαμβάνει τις συναρτήσεις με την συνάρτηση : printFuncStack
• Έλεγχος εμβέλειας και ονόματος μίας κλήσης συνάρτησης χωρίς παραμέτρους με την συνάρτηση : checkScopeWithout
• Έλεγχος εμβέλειας και ονόματος και αριθμού παραμέτρων μίας κλήσης συνάρτησης με παραμέτρους με την συνάρτηση : checkScopeWith
• Έλεγχος αν μία έκφραση είναι αριθμός με την συνάρτηση : isNumeric
• Επιστροφή τύπου μίας συνάρτησης από την στοίβα συναρτήσεων με την συνάρτηση : getFuncType
• Διαγραφή στοίβας συναρτήσεων με την συνάρτηση : deleteFuncStack
• Εισαγωγή στο Dictionary με τις παραμέτρους τύπου ref με την συνάρτηση : insertRefList

Η συγκεκριμμένη κλάση έχει ως δεδομένα : 
• Stack<ScopeObject> mystack : η κεντρική στοίβα στην οποία προστίθενται τα αντικείμενα του προγράμματος σε κάθε εμβέλεια
• Map<Integer,Integer> map : καθορίζει τις εμβέλειες και την στοίβα κάθε εμβέλειας
• Stack<FuncScope> funcStack :	η στοίβα με τις συναρτήσεις του προγράμματος
• Map<String,List> refPar : το Dictionary που έχει ως κλειδί το όνομα της συνάρτησης και ως τιμή μία λίστα από τις παραμέτρους που είναι ref
• int position : η εμβέλεια κάθε στοίβας
• int ifWhileScope : τιμή που βλέπουμε που τελειώνουν τα if, while blocks για την σωστή καταμέτρηση των ετικετών κατά τις αναπηδήσεις


Για τον ενδιάμεσο κώδικα, δημιουργήσαμε την κλάση Intermediate.java η οποία έχει τις παρακάτω λειτουργίες (περιλαμβάνονται μόνο αυτές που χρησιμοποιούνται):

• Δημιουργία τετράδας με την συνάρτηση : genQuad
• Δημιουργία προσωρινής τιμής με την συνάρτηση : newTemp
• Εύρεση "καταχωρητή" φράσεις(expression) και επιστροφή του με την συνάρτηση : Place
• Εκτύπωση λίστας από τετράδες με την συνάρτηση : print
• Αλλαγή ετικέτας αναπήδησης μίας τετράδας από ένα συγκεκριμένο String σε συγκεκριμένο αριθμό με την συνάρτηση : backpatch
• Εισαγωγή "καταχωρητή" σε λίστα "καταχωρητών" με την συνάρτηση : insertReg
• Αλλαγή τετράδας "par, w , V, - " σε "par, w , RET, - " με την συνάρτηση : insertRet
• Αλλαγή τετράδας "par, w , V, - " σε "par, w , R, - " με την συνάρτηση : insertRef
• Εισαγωγή "ζευγαριού" (Expression,Position) στην βοηθητική λίστα για το Place με την συνάρτηση : insertPlaceHelper
• Εκτύπωση λίστας για την λίστα με τα Place με την συνάρτηση : printPlace

Η συγκεκριμμένη κλάση έχει ως δεδομένα : 
• int count : ο αριθμός των τετράδων
• List<Quad> quadList : η λίστα με τις τετράδες
• List<InterReg> regList :	η λίστα με τους "καταχωρητές"
• List<placeHelper> helpList : η λίστα με τα ζευγάρια -Έκφραση,"Καταχωρητής"- 
• OpCode opCode : ο τελεστής της τετράδας


Οι επιπλέον κλάσεις που χρησιμοποιήσαμε είναι οι εξής: 
• FuncScope : περιέχει πληροφορίες για τα functions που περιέχονται στο πρόγραμμα (όνομα, παράμετροι και οι τύποι τους, τύπος που επιστρέφει η συνάρτηση, αριθμός παραμέτρων)
• InterReg : περιέχει πληροφορίες για έναν καταχωρητή w (αριθμός ετικέτας, τελεστής που χρησιμοποιείται, τύπος δεδομένων, όνομα )
• MyException : κλάση που κληρονομεί από την κλάση Exception
• OpCode : περιλαμβάνει τους τελεστές
• operator : περιλαμβάνει όνομα τελεστή και τιμή για τους τελεστές "relop","op"
• Quad : περιέχει τον τελεστή και τα 3 arguments της τετράδας
• ScopeObject : περιέχει πληροφορίες για το Object της κύριας στοίβας του SymbolTable (όνομα , τύπο και τύπος μεταβλητής("var","par"...))
• placeHelper : περιέχει το expression και το position


Σχόλια

• Κατά την εκτέλεση των παραδειγμάτων, παρατηρήσαμε ότι το geti() σε μερικές περιπτώσεις καλείται με numeric parameter αλλά στην εκφώνηση, η δήλωσή της είναι χωρίς, οπότε και σχολιάσαμε το συγκεκριμένο κόμματι κώδικα.
• Κατά την κλήση μίας συνάρτησησης, δεν καταφέραμε να υλοποιήσουμε σωστά τον έλεγχο των τύπων των παραμέτρων.
• Προσπαθήσαμε να διαμορφώσουμε διαφορετικά την εκτέλεση των αρχείων (σαν  command line), αλλά δεν προλάβαμε. Γι' αυτό
το λόγο στη main έχουμε τοποθετήσει σημείο που να μπορείτε να εισάγετε το pathname του αρχείου που επιθυμείτε να εκτελεστεί.


Μεταγλώττιση της εργασίας

• Για τη μεταγλώττιση της εργασίας, χρησιμοποιήσαμε το εργαλείο maven που παρέχεται από το πρόγραμμα IntelliJ IDEA.
• Κάνουμε import,  από το φάκελο Skeleton.java,  το αρχείο pom.xml.
• Μεταγλωττίζουμε το πρόγραμμα με τις επιλογές clean (διαγραφή generated  αρχείων) και compile (build -> δημιουργία generated  αρχείων) του προγράμματος IntelliJ IDEA από το παράθυρο Maven Projects.


Εκτέλεση Αρχείου

• Επιλέγουμε την Main.java ως προεπιλεγμένη main του project μας.
• Για την εκτέλεση αρχείου απαιτείται η εισαγωγή κάποιου προγράμματος είτε με System.in είτε με ολοκληρωμένο path.


Μέρος 3ο

Στην εργασία αυτή κληθήκαμε να ολοκληρώσουμε τον τελικό κώδικα για τη γλώσσα Grace. Για την δημιουργία του χρησιμοποιήσαμε τον ενδιάμεσο κώδικα που είχαμε υλοποιήσει στο 2ο μέρος της εργασίας.

Δημιουργήσαμε μια κλάση JavaBytecode, η οποία εκτελεί τις κύριες λειτουργίες για την υλοποίηση του τελικού κώδικα.
Συγκεκριμένα δημιουργείται μια λίστα bytecodeList η οποία περιέχει τις εντολές του τελικού κώδικα σε μορφή String. Στη συνέχεια αυτή εκτυπώνεται σε ένα αρχείο bytecode.j. 

Η κλάση JavaBytecode έχει ως δεδομένα : 

• List<Quad> InitialQuadList : λίστα με τις τετράδες του ενδιάμεσου κώδικα (δεν διαθέτει αλλαγές)
• List<Quad> quadList : λίστα με τις τετράδες του ενδιάμεσου κώδικα (μπορεί να διαθέτει αλλαγές, αν χρειαστεί να προσθέσουμε τη συνάρτηση main)
• List<String> bytecodeList : λίστα με τις εντολές του τελικού κώδικα
• int counter : ετικέτα για τις εντολές του τελικού κώδικα
• List <funcBeggining> funcScope : λίστα που περιέχει τη θέση της πρώτης, της δεύτερης και της τελευταίας εντολής κάθε συνάρτησης
• List <FuncScopeHelper> myFuncScopeHelperList : λίστα με τα ονόματα συναρτήσεων και τις εμβέλειές τους
• Stack<FuncScope> funcStack : λίστα που περιέχει το όνομα, τις παραμέτρους κ.τ.λ. κάθε συνάρτησης
• int istoreCounter : μετρητής για τα "store"
• List<placeHelper> registers : λίστα με τις μεταβλητές-καταχωρητές και τις τιμές τους
• List <VarLocal> VarLocalList : λίστα με τις τοπικές μεταβλητές μιας  (αποτελείται από όνομα, θέση στην στοίβα των Local Variables και την τιμή του(αν είναι καταχωρητής))
• List<ScopeObject> allVars : λίστα με τις μεταβλητές όλου του προγράμματος
• Stack<quadCounter> jumpStack : λίστα από τετράδες με την ετικέτα τους από τον ενδιάμεσο κώδικα.
• Stack<quadCounter> ifbStack : λίστα από τετράδες με OpCode ifb τα οποία δεν έχουν κλείσει ακόμα.



Περιέχει τις παρακάτω συναρτήσεις:

• Constructor της κλάσης : JavaBytecode
• Μια συνάρτηση που δημιουργεί τον τελικό κώδικα  για κάθε συνάρτηση: produceJavaBytecode
• Μια συνάρτηση που προσθέτει τον κώδικα της main(), αν το πρόγραμμα δεν ξεκινάει με αυτόν : changeQuadList
• Μια συνάρτηση που καλείται από την changeQuadList, για να αλλάξει (άν χρειάζεται) τα labels στις εντολές του ενδιάμεσου κώδικα : setQuadListLabels
• Μια συνάρτηση που δημιουργεί τη λίστα με τις εμβέλειες της κάθε συνάρτησης : createFuncScope
• Μια συνάρτηση που ταξινομεί τις συναρτήσεις σύμφωνα με τις εμβέλειές τους, έτσι ώστε οι εμφωλευμένες συναρτήσεις να ορίζονται πρώτες : orderFuncScope
• Μια συνάρτηση που καλείται από την produceJavaBytecode και είναι βοηθητική για την παραγωγή του τελικού κώδικα για όλες τις εντολές του ενδιάμεσου εκτός από την πρώτη και την τελευταία (unit, endu): handleQuad
• Μια συνάρτηση που δέχεται σαν όρισμα το όνομα ενός πίνακα και επιστρέφει τον τύπο του (int, char) : getTypeArray
• Μια συνάρτηση που δέχεται σαν όρισμα το όνομα ενός πίνακα και επιστρέφει το dimension : getArrayDim
• Μια συνάρτηση που δέχεται σαν όρισμα το όνομα ενός πίνακα, τον αναζητεί στη λίστα allVars και επιστρέφει το όνομα της μεταβλητής : getArrayDimVar
• Μια συνάρτηση που δέχεται σαν όρισμα το όνομα ενός πίνακα και επιστρέφει το όνομα της μεταβλητής : getVar
• Μια συνάρτηση που αναζητεί μια μεταβλητή στη λίστα με τις τοπικές μεταβλητές της συνάρτησης και επιστρέφει true αν τη βρει : VarLocalExists
• Μια συνάρτηση που επιστρέφει true αν μια συμβολοσειρά είναι Numeric : isNumeric
• Μια συνάρτηση που επιστρέφει το return type μιας άλλης συνάρτησης : setMethodRet
• Μια συνάρτηση που δημιουργεί τη λίστα με τις συναρτήσεις και τις εμβέλειές τους : findFunctionScope
• Μια συνάρτηση που επιστρέφει τον αριθμό των παραμέτρων της αρχικής συνάρτησης : getNoOfParamsForQuad
• Μια συνάρτηση που επιστρέφει τον αριθμό των παραμέτρων κάποιας άλλης συνάρτησης : getNoOfParams
• Μια συνάρτηση που θέτει και επιστρέφει τους τύπους των παραμέτρων μιας συνάρτησης : setMethodPar
• Μια συνάρτηση που επιστρέφει την τιμή μιας μεταβλητής-καταχωρητή : returnRegExpr
• Μια συνάρτηση που επιστρέφει μια λίστα [μεταβλητή-καταχωρητής, τιμή] για μια συγκεκριμένη τετράδα : getRegRelop
• Μια συνάρτηση που εκτελεί τις πράξεις πρόσθεσης, αφαίρεσης, πολλαπλασιασμού, διαίρεσης και modulus : op
• Μια συνάρτηση που επιστρέφει true, αν η προηγούμενη τετράδα είχε την εντολή return : previousRet
• Μια συνάρτηση που εκτυπώνει όλες τις συναρτήσεις και τις αντίστοιχες εμβέλειές τους : printFuncScopeHelper
• Μια συνάρτηση που εκτυπώνει όλες τις τοπικές μεταβλητές μιας συνάρτησης : PrintVarLocal
• Μια συνάρτηση που εκτυπώνει όλες τις μεταβλητές που χρησιμοποιούνται στο πρόγραμμα που δίνει ο χρήστης : printAllVars
• Μια συνάρτηση που εκτυπώνει τη λίστα με τις τετράδες του ενδιάμεσου κώδικα : printQuadList
• Μια συνάρτηση που λειτουργεί ως backpatch(διορθώνει τα labels του τελικού κώδικα) για την εντολή jump : jumpHelper
• Μια συνάρτηση που λειτουργεί ως backpatch(διορθώνει τα labels του τελικού κώδικα) για την εντολή ifb : ifbHelper



Δημιουργήσαμε επίσης τις κλάσεις

•VarLocal : περιλαμβάνει το όνομα, τη θέση αποθήκευσης, και την τιμή (αν το όνομα είναι "μεταβλητή-καταχωρητής") μιας μεταβλητής

•funcBeggining : περιλαμβάνει το όνομα, τη θέση της πρώτης, της δεύτερης και της τελευταίας εντολής μιας συνάρτησης

•FuncScopeHelper : περιλαμβάνει το όνομα και την εμβέλεια μιας συνάρτησης μιας συνάρτησης

•QuadCounter : περιλαμβάνει μία τετράδα και την θέση της (position)(ετικέτα από τον ενδιάμεσο κώδικα)



Διορθώσεις Σημασιολογικής Ανάλυσης

Προσπαθήσαμε να διορθώσουμε διάφορα λάθη που είχαμε κάνει στο 2ο μέρος της εργασίας. Αν και καταφέραμε να επιλύσουμε τα περισσότερα προβλήματα, τα παρακάτω δεν προλάβαμε να τα αντιμετωπίσουμε:

• Δέχεται συνάρτηση που επιστρέφει int και χωρίς return statement (Αν και κατά την παραγωγή του τελικού κώδικα, εμφανίζεται λάθος κατά το compile με την jasmin).
• Null pointer σε testcase με mutually recursive συναρτήσεις όπου σε καμία από τις δύο δεν έχει προηγηθεί declaration (Υλοποιείται αν εισάγουμε την δήλωση της συνάρτησης στην στοίβα funcStack).
• Illegal state exception (variable not found) στο puti(chr(20, 30)).
• Illegal state exception (variable not found) στο puti(strcmp(dest, “Teehee”)) με το dest να είναι τύπου char[100].


Μεταγλώττιση της εργασίας

• Για τη μεταγλώττιση της εργασίας, χρησιμοποιήσαμε το εργαλείο maven που παρέχεται από το πρόγραμμα IntelliJ IDEA.
• Κάνουμε import,  από το φάκελο Skeleton.java,  το αρχείο pom.xml.
• Μεταγλωττίζουμε το πρόγραμμα με τις επιλογές clean (διαγραφή generated  αρχείων) και compile (build -> δημιουργία generated  αρχείων) του προγράμματος IntelliJ IDEA από το παράθυρο Maven Projects.


Εκτέλεση Αρχείου

• Επιλέγουμε την Main.java ως προεπιλεγμένη main του project μας.
• Προσθέτουμε το path του προγράμματος προς εκτέλεση σαν Program argument (Run -> Edit Configurations... -> Application -> Main -> Configuration -> Program arguments).
• Εκτελούμε το πρόγραμμα πατώντας Run.
• Μέσω του terminal tou IntelliJ IDEA πληκτρολογούμε τις εντολές 
	java -jar path\jasmin-2.4\jasmin.jar bytecode.j (δημιουργία αρχείου Grace.class) και 
	java -cp .;path\jasmin-2.4\jasmin.jar Grace (ή java Grace στον φάκελο που δημιουργήθηκε το Grace.class) (για εκτέλεση αρχείου Grace.class)
• Το τελικό πρόγραμμα είναι το Grace.class .	


Σχόλια

- Λόγω έλλειψης χρόνου κάναμε τις παρακάτω παραδοχές για την εργασία:
• Υπάρχουν μόνο ακέραιες μεταβλητές (δηλαδή δεν υλοποιήσαμε τις περιπτώσεις για χαρακτήρες) και μονοδιάστατοι πίνακες ακεραίων.
• Δεν υπάρχουν παράμετροι με πέρασμα REF.
• Θεωρήσαμε ότι δεν υπάρχουν συναρτήσεις με το ίδιο όνομα (Συναρτήσεις με το ίδιο όνομα θα μπορούσαν να μετονομαστούν σε function,i ,όπου i:1,2,... ανάλογα με τον αριθμό των ίδιων συναρτήσεων).
• Κάθε πρόγραμμα πρέπει να ξεκινάει με μια συνάρτηση main(). Αν αυτό δεν συμβαίνει, τότε δημιουργούμε από μόνες μας μια συνάρτηση main(), η οποία καλεί την πρώτη συνάρτηση του προγράμματος.
• Οι εντολές τελικού κώδικα που παράγονται από τις ifb και jump του ενδιάμεσου κώδικα δεν δουλεύουν για όλες τις περιπτώσεις.
• Δεν υλοποιήσαμε πίνακα με διάσταση μεταβλητή.



Εκτέλεση Ενδεικτικών Παραδειγμάτων


1ο Παράδειγμα

• ΚΩΔΙΚΑΣ ΣΕ GRACE

fun f():nothing
var k:int;
var l:int[10];
{
	l[1]<-5;
	if l[1]<3 then 
	{
		k<-2;
		l[2] <- k;
		k<-20;
	}	
}

• ΚΩΔΙΚΑΣ ΣΕ JAVA BYTECODE

.class public Grace
.super java/lang/Object
.method public <init>()V
 aload_0
invokenonvirtual java/lang/Object/<init>()V
return
.end method
.method f()V
.limit stack 20
.limit locals 100
0 : aload_0 
1 : ldc 10
2 : newarray int
3 : astore 1
4 : aload 1
5 : ldc 1
6 : ldc 5
7 : iastore 
8 : aload 1
9 : ldc 1
10 : aload 1
11 : ldc 1
12 : iaload 
13 : ldc 3
14 : if_icmplt 16
15 : goto 24
16 : ldc 2
17 : istore 3
18 : aload 1
19 : ldc 2
20 : iload 3
21 : iastore 
22 : ldc 20
23 : istore 3
24 : return
.end method
.method public static main([Ljava/lang/String;)V
.limit stack 20
.limit locals 100
0 : aload_0 
1 : new Grace
2 : dup
3 : invokespecial Grace/<init>()V
4 : invokespecial Grace/f()V
5 : return
.end method


• ΚΩΔΙΚΑΣ ΟΠΩΣ ΕΜΦΑΝΙΖΕΤΑΙ ΣΤΟ IntelliJ IDEA

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

public class Grace {
    public Grace() {
    }

    void f() {
        int[] var1 = new int[10];
        var1[1] = 5;
        byte var10002 = 1;
        if(var1[1] < 3) {
            byte var3 = 2;
            var1[2] = var3;
            var3 = 20;
        }

    }

    public static void main(String[] var0) {
        (new Grace()).f();
    }
}


• .class

cafe babe 0003 002d 0018 0a00 1100 0601
0016 285b 4c6a 6176 612f 6c61 6e67 2f53
7472 696e 673b 2956 0100 106a 6176 612f
6c61 6e67 2f4f 626a 6563 7401 0006 3c69
6e69 743e 0700 030c 0004 000c 0300 0000
050c 0016 000c 0300 0000 0303 0000 0002
0300 0000 0101 0003 2829 5601 0004 436f
6465 0300 0000 0a01 0004 6d61 696e 0a00
1100 0807 0017 0100 0a62 7974 6563 6f64
652e 6a01 000a 536f 7572 6365 4669 6c65
0a00 0500 0603 0000 0014 0100 0166 0100
0547 7261 6365 0021 0011 0005 0000 0000
0003 0001 0004 000c 0001 000d 0000 0011
0001 0001 0000 0005 2ab7 0014 b100 0000
0000 0000 1600 0c00 0100 0d00 0000 3b00
6400 0a00 0000 2f2a 120e bc0a 3a01 1901
120b 1207 4f19 0112 0b19 0112 0b2e 1209
a100 06a7 0012 120a 3603 1901 120a 1503
4f12 1536 03b1 0000 0000 0009 000f 0002
0001 000d 0000 0018 0064 000a 0000 000c
2abb 0011 59b7 0001 b700 10b1 0000 0000
0001 0013 0000 0002 0012 


2ο Παράδειγμα

• ΚΩΔΙΚΑΣ ΣΕ GRACE

fun f():nothing
var k:int;
var l:int[10];
{
	l[5] <- 10;
	l[1] <- 20;
	k <- 3*(2+l[5])/4;
	k <- k mod l[1];
}

• ΚΩΔΙΚΑΣ ΣΕ JAVA BYTECODE

.class public Grace
.super java/lang/Object
.method public <init>()V
 aload_0
invokenonvirtual java/lang/Object/<init>()V
return
.end method
.method f()V
.limit stack 20
.limit locals 100
0 : aload_0 
1 : ldc 10
2 : newarray int
3 : astore 1
4 : aload 1
5 : ldc 5
6 : ldc 10
7 : iastore 
8 : aload 1
9 : ldc 1
10 : ldc 20
11 : iastore 
12 : aload 1
13 : ldc 5
14 : iaload 
15 : ldc 2
16 : iadd
17 : istore 4
18 : ldc 3
19 : iload 4
20 : imul
21 : istore 5
22 : iload 5
23 : ldc 4
24 : idiv
25 : istore 6
26 : iload 6
27 : istore 7
28 : aload 1
29 : ldc 1
30 : iaload 
31 : iload 7
32 : irem
33 : istore 8
34 : iload 8
35 : istore 7
36 : return
.end method
.method public static main([Ljava/lang/String;)V
.limit stack 20
.limit locals 100
0 : aload_0 
1 : new Grace
2 : dup
3 : invokespecial Grace/<init>()V
4 : invokespecial Grace/f()V
5 : return
.end method


• ΚΩΔΙΚΑΣ ΟΠΩΣ ΕΜΦΑΝΙΖΕΤΑΙ ΣΤΟ IntelliJ IDEA

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

public class Grace {
    public Grace() {
    }

    void f() {
        int[] var1 = new int[10];
        var1[5] = 10;
        var1[1] = 20;
        int var4 = var1[5] + 2;
        int var5 = 3 * var4;
        int var6 = var5 / 4;
        int var8 = var1[1] % var6;
    }

    public static void main(String[] var0) {
        (new Grace()).f();
    }
}


• .class

cafe babe 0003 002d 0019 0a00 1200 0601
0016 285b 4c6a 6176 612f 6c61 6e67 2f53
7472 696e 673b 2956 0100 106a 6176 612f
6c61 6e67 2f4f 626a 6563 7401 0006 3c69
6e69 743e 0700 030c 0004 000d 0300 0000
050c 0017 000d 0300 0000 0403 0000 0003
0300 0000 0203 0000 0001 0100 0328 2956
0100 0443 6f64 6503 0000 000a 0100 046d
6169 6e0a 0012 0008 0700 1801 000a 6279
7465 636f 6465 2e6a 0100 0a53 6f75 7263
6546 696c 650a 0005 0006 0300 0000 1401
0001 6601 0005 4772 6163 6500 2100 1200
0500 0000 0000 0300 0100 0400 0d00 0100
0e00 0000 1100 0100 0100 0000 052a b700
15b1 0000 0000 0000 0017 000d 0001 000e
0000 004c 0064 000a 0000 0040 2a12 0fbc
0a3a 0119 0112 0712 0f4f 1901 120c 1216
4f19 0112 072e 120b 6036 0412 0a15 0468
3605 1505 1209 6c36 0615 0636 0719 0112
0c2e 1507 7036 0815 0836 07b1 0000 0000
0009 0010 0002 0001 000e 0000 0018 0064
000a 0000 000c 2abb 0012 59b7 0001 b700
11b1 0000 0000 0001 0014 0000 0002 0013
