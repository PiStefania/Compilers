Εργασία Μεταγλωττιστών
Μέρος 1ο 

Στην εργασία αυτή κληθήκαμε να υλοποιήσουμε τον λεκτικό και συντακτικό αναλυτή για τη γλώσσα Grace. Επιλέξαμε τη γλώσσα Java και για την εκτέλεση του προγράμματος επιλέξαμε παραγωγή Java bytecode και διερμηνεία αυτού στη JavaVM. Το εργαλείο που χρησιμοποιήσαμε είναι το SableCC.
Στο αρχείο «parser.grammar» δημιουργήσαμε helpers, tokens, ignored tokens και productions. Σε ένα αρχείο «Printer.java» υλοποιήσαμε μια κλάση Printer και τις συναρτήσεις της, με τις οποίες εκτυπώσαμε και το CST  που δημιουργήθηκε. Εκτυπώσαμε τα δεδομένα που ανήκουν σε ένα node το οποίο παράγεται από τα productions επιλεκτικά. Για παράδειγμα στη συνάρτηση inAProgram  εκτυπώνεται μόνο η λέξη Program μαζί με μια αριστερή παρένθεση ‘(‘ , ενώ στην outAProgram εκτυπώνεται η δεξιά παρένθεση ‘)‘. Αυτό, καθώς και η προσθήκη κενών ‘ ‘  (indentation) αποσκοπεί στην καλύτερη κατανόηση των ορίων του κάθε κόμβου. Στη συνάρτηση main, καλείται η κλάση Printer, για την εκτύπωση του δέντρου.
  
Σχόλια

• Δεν εμφανίζουμε ονομασίες ορισμένων τύπων κόμβων, καθώς τις θεωρούμε αυτονόητες (π.χ το DataType υπάρχει σχολιασμένο στις συναρτήσεις που αφορούν τους DataType κόμβους, αφού μπορεί να εκτυπώνεται το «Type»). 

Μεταγλώττιση της εργασίας

• Για τη μεταγλώττιση της εργασίας, χρησιμοποιήσαμε το εργαλείο maven που παρέχεται από το πρόγραμμα IntelliJ IDEA.
• Κάνουμε import,  από το φάκελο Skeleton.java,  το αρχείο pom.xml.
• Μεταγλωττίζουμε το πρόγραμμα με τις επιλογές clean (διαγραφή generated  αρχείων) και compile (build -> δημιουργία generated  αρχείων) του προγράμματος IntelliJ IDEA από το παράθυρο Maven Projects.


Εκτέλεση Αρχείου

• Επιλέγουμε την Main.java ως προεπιλεγμένη main του project μας.
• Για την εκτέλεση αρχείου απαιτείται η εισαγωγή κάποιου προγράμματος είτε με System.in είτε με ολοκληρωμένο path.


Εκτέλεση Παραδειγμάτων

Hello World
([Program]
 ([Function Definition]
  ([Header] fun [id] hello ( ) : ([Return Data Type] nothing ))

  ([Block] 
   { 
    ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: "Hello world!\n" ) ) ) ); )

   } 
  )
 )
)


Reverse
([Program]
 ([Function Definition]
  ([Header] fun [id] main ( ) : ([Return Data Type] nothing ))
  ([Local Definition]
   ([Variable Definition] var [id] r : ([Type] char[32] ); )
  )
  ([Local Definition]
   ([Function Definition]
    ([Header] fun [id] reverse ( ([Function Parameters Definition] ref [id] s : [Function Parameter Type] char[] ))) : ([Return Data Type] nothing ))
    ([Local Definition]
     ([Variable Definition] var [id] i , [id] l : ([Type] int )); )
    )

    ([Block] 
     { 
      ([Statement] ([L-Value] [id] l ) [Assignment] <- ([Expression] ([Function Call][id] strlen ( ([Expression] ([L-Value] [id] s ) ) ) )) ; )
      ([Statement] ([L-Value] [id] i ) [Assignment] <- ([Expression] [Constant]: 0 ) ; )
      ([Statement] while ([Expression] ([L-Value] [id] i ) ) [Smaller] < ([Expression] ([L-Value] [id] l ) ) do 
       ([Statement] 
        ([Block] 
         { 
          ([Statement] ([L-Value] ([L-Value] [id] r ) [ ([Expression] ([L-Value] [id] i ) ) ] ) [Assignment] <- ([Expression] ([L-Value] ([L-Value] [id] s ) [ ([Expression] ((([L-Value] [id] l ) [Minus] - ([L-Value] [id] i ) )[Minus] - [Constant]: 1 )) ] ) ) ; )
          ([Statement] ([L-Value] [id] i ) [Assignment] <- ([Expression] (([L-Value] [id] i ) [Plus] + [Constant]: 1 )) ; )

         } 
        )
       )
      )
      ([Statement] ([L-Value] ([L-Value] [id] r ) [ ([Expression] ([L-Value] [id] i ) ) ] ) [Assignment] <- ([Expression] [Constant character]: '\0' ) ; )

     } 
    )
   )
  )

  ([Block] 
   { 
    ([Statement] ([Function Call][id] reverse ( ([Expression] ([L-Value] [Constant String]: "\n!dlrow olleH" ) ) ) ); )
    ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [id] r ) ) ) ); )

   } 
  )
 )
)


Hanoi
([Program]
 ([Function Definition]
  ([Header] fun [id] solve ( ) : ([Return Data Type] nothing ))
  ([Local Definition]
   ([Function Definition]
    ([Header] fun [id] hanoi ( ([Function Parameters Definition] [id] rings : ([Function Parameter Type] int ))); ([Function Parameters Definition] ref [id] source , [id] target , [id] auxiliary : [Function Parameter Type] char[] ))) : ([Return Data Type] nothing ))
    ([Local Definition]
     ([Function Definition]
      ([Header] fun [id] move ( ([Function Parameters Definition] ref [id] source , [id] target : [Function Parameter Type] char[] ))) : ([Return Data Type] nothing ))

      ([Block] 
       { 
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: "Moving from " ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [id] source ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: " to " ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [id] target ) ) ) ); )
        ([Statement] ([Function Call][id] puts ( ([Expression] ([L-Value] [Constant String]: ".\n" ) ) ) ); )

       } 
      )
     )
    )

    ([Block] 
     { 
      ([Statement] if ([Expression] ([L-Value] [id] rings ) ) [Greater or Equal] >= ([Expression] [Constant]: 1 ) then 
       ([Statement] 
        ([Block] 
         { 
          ([Statement] ([Function Call][id] hanoi ( ([Expression] (([L-Value] [id] rings ) [Minus] - [Constant]: 1 )) , ([Expression] ([L-Value] [id] source ) ) , ([Expression] ([L-Value] [id] auxiliary ) ) , ([Expression] ([L-Value] [id] target ) ) ) ); )
          ([Statement] ([Function Call][id] move ( ([Expression] ([L-Value] [id] source ) ) , ([Expression] ([L-Value] [id] target ) ) ) ); )
          ([Statement] ([Function Call][id] hanoi ( ([Expression] (([L-Value] [id] rings ) [Minus] - [Constant]: 1 )) , ([Expression] ([L-Value] [id] auxiliary ) ) , ([Expression] ([L-Value] [id] target ) ) , ([Expression] ([L-Value] [id] source ) ) ) ); )

         } 
        )
       )
      )

     } 
    )
   )
  )
  ([Local Definition]
   ([Variable Definition] var [id] NumberOfRings : ([Type] int )); )
  )

  ([Block] 
   { 
    ([Statement] ([Function Call][id] writeString ( ([Expression] ([L-Value] [Constant String]: "Rings: " ) ) ) ); )
    ([Statement] ([L-Value] [id] NumberOfRings ) [Assignment] <- ([Expression] ([Function Call][id] geti ( ) ) )) ; )
    ([Statement] ([Function Call][id] hanoi ( ([Expression] ([L-Value] [id] NumberOfRings ) ) , ([Expression] ([L-Value] [Constant String]: "left" ) ) , ([Expression] ([L-Value] [Constant String]: "right" ) ) , ([Expression] ([L-Value] [Constant String]: "middle" ) ) ) ); )

   } 
  )
 )
)

