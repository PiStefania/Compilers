Package compiler;


Helpers
    sp = ' ';
    lf = 0x000a;
    cr = 0x000d;
    ff = 0x000c;
    ht = 0x0009;
    line_terminator = lf | cr | cr lf;
    white_space = (sp | ht | ff | line_terminator)*;
    white_space2 = (sp | ht | ff | cr)*;
    lowercase = ['a' .. 'z'];
    uppercase = ['A' .. 'Z'];
    number = ['0' .. '9']+;
    digit = ['0' .. '9'];


    letter = lowercase | uppercase;

    hex_prefix = 'x';
    hex_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];
    hex_constant = hex_prefix hex_digit hex_digit;

    underscore='_';
    backslash = '\';
    mono_eisagwgiko = ''';
    diplo_eisagwgiko = '"';

    esc_ch_nl='\n';
    esc_ch_tab='\t';
    esc_ch_cr='\r';
    esc_ch0='\0';
    esc_ch_bs='\\';
    esc_ch_me= backslash mono_eisagwgiko;
    esc_ch_de='\"';
    esc_ch_asc=backslash hex_constant;

    esc_ch = esc_ch_nl | esc_ch_tab | esc_ch_cr | esc_ch0 | esc_ch_bs | esc_ch_me | esc_ch_de | esc_ch_asc;

    symbol_without_backslash = '!' | ':' | '@' | '$' | '%' | '^' | '&' | '*' | '.' | '(' | ')'|';'|'<'|'>'| ',' | '?' | '/' | '|' | '{' | '}' | '[' | ']' | '`' | '~' | esc_ch | sp;
    symbol = symbol_without_backslash | backslash;



    plus = '+';
    minus = '-';
    mult = '*';
    div = '/';
    equal = '=';
    not_equal = '#';
    greater = '>';
    smaller = '<';
    smaller_eq = '<=';
    greater_eq = '>=';

    l_par = '(';
    r_par = ')';
    l_br = '[';
    r_br = ']';
    curly_l_br = '{';
    curly_r_br = '}';
    comma = ',';
    semicolon = ';';
    colon = ':';
    assign = '<-';

    dollar = '$';
    double_dollar = '$$';
    all = [0 .. 0xffff];
    all_not_nl = [all - lf];
    all_not_dol = [all - dollar];
    all_not_dol_not_lf = [all_not_nl - dollar];

    comment_line = dollar all_not_dol_not_lf all_not_nl*;

    mul_comment_line = double_dollar all_not_dol* double_dollar;

    mod = 'mod';
    div1 = 'div';

Tokens
    and = 'and';
    char = 'char';
    div1 = div1;
    do = 'do';
    else = 'else';
    fun = 'fun';
    if = 'if';
    int = 'int';
    mod = mod;
    not = 'not';
    nothing = 'nothing';
    or = 'or';
    ref = 'ref';
    return = 'return';
    then = 'then';
    var = 'var';
    while = 'while';

    mod_space = sp mod sp;
    div_space = sp div1 sp;

    var_name = letter (letter | number |  underscore)*;
    constant = number*;


    constant_character = mono_eisagwgiko (esc_ch |letter |number | symbol) mono_eisagwgiko;

    constant_string = diplo_eisagwgiko (letter | number | esc_ch | symbol_without_backslash | white_space2)* diplo_eisagwgiko;


    white_space = white_space;
    comment_line = comment_line;
    mul_comment_line = mul_comment_line;

    array = ('int' | 'char') '[' ']' ('['  number ']')*
            | ('int' | 'char') ('['  number ']')*;

    another_type = 'another type';
    l_par = l_par;
    r_par = r_par;
    l_br = l_br;
    r_br = r_br;
    curly_l_br = curly_l_br;
    curly_r_br = curly_r_br;
    comma = comma;
    semicolon = semicolon;
    colon = colon;
    assign = assign;

    plus = plus;
    minus = minus;
    mult = mult;
    div = div;
    equal = equal;
    not_equal = not_equal;
    greater = greater;
    smaller = smaller;
    smaller_eq = smaller_eq;
    greater_eq = greater_eq;

Ignored Tokens
    white_space,
    comment_line,
    mul_comment_line;


Productions

    program = {func_def} func_def{->New program(func_def)};      /* func_def */

    func_def = {func_def} header local_def* block{->New func_def.all(header.func_def,New func_definition( [local_def.func_def],[block.stmt]))};     /*header local_def* block*/

    header{->func_def} = {with_header_helper_bigger} fun var_name l_par header_helper_bigger header_helper2 ret_type{->New func_def.header_with(New head(var_name, header_helper_bigger.func_def),ret_type.func_def)}
                | {without_header_helper_bigger} fun var_name l_par header_helper2 ret_type {->New func_def.header(var_name,ret_type.func_def)};    /* fun var_name ret_type*/

    header_helper{->func_def} =  semicolon fpar_def{->fpar_def.func_def};

    header_helper_bigger{->func_def} = fpar_def header_helper*{->New func_def.header_big(fpar_def.func_def,[header_helper.func_def])};


    header_helper2 = r_par colon;

    fpar_def{->func_def} = {with_ref} ref var_name var_def_helper* colon_id fpar_type{->New func_def.fpar_def(New fpar(ref,var_name),New fpar_right([var_def_helper.func_def],fpar_type.func_def))}        /*ref var_name fpar_type */
               |{no_ref} var_name var_def_helper* colon_id fpar_type {->New func_def.fpar_def_no_ref(New no_ref(var_name, [var_def_helper.func_def]),fpar_type.func_def)};

    data_type{->func_def} = {int} int {->New func_def.int(int)}
    | {char} char {->New func_def.char(char)};

    type{->func_def} = {dt} data_type type_helper*{-> New func_def.type(data_type.func_def,[type_helper.func_def])}  /*constant*/
            | {ar} array   {->New func_def.array(array)} ;          /* array */
    type_helper{->func_def} = l_br constant r_br {->New func_def.constant(constant)};

    ret_type{->func_def} = {dt} data_type {->data_type.func_def}
    | {nothing} nothing {->New func_def.nothing(nothing)} ;

    fpar_type{->func_def} = {dt_with_helper} data_type fpar_type_helper2 {-> New func_def.fpar_type(data_type.func_def,fpar_type_helper2.func_def)}
                | {dt_without_helper} data_type {->data_type.func_def}
                | {arr} array {->New func_def.array2(array)};

    brs = l_br r_br;
    fpar_type_helper{->func_def} = l_br constant r_br {->New func_def.fpar_type_helper(constant)};
    fpar_type_helper2{->func_def} = {with_brs} brs fpar_type_helper* {-> New func_def.with_brs([fpar_type_helper.func_def])}
                        | {without_brs} fpar_type_helper* {-> New func_def.without_brs([fpar_type_helper.func_def])};


    local_def{->func_def} = {func_def} func_def {->func_def.func_def}
    | {func_decl} func_decl {->func_decl.func_def}
    | {var_def} var_def{->var_def.func_def};

    var_def{->func_def} = var var_name var_def_helper* colon_id type semicolon{->New func_def.var_def(New var1(var_name,[var_def_helper.func_def]),type.func_def)};
    var_def_helper{->func_def} = comma var_name{->New func_def.var_help(var_name)};
    colon_id = colon;


    func_decl{->func_def} = header semicolon{->New func_def.func_decl(header.func_def)};


    //block{->func_def} = {block} curly_l_br curly_r_br{->New func_def.block(curly_l_br,curly_r_br)};




    stmt{->stmt*} = {semicolon} semicolon {->[]}
          | {expression} l_value assign_id all_expr semicolon_id   {->[New stmt.expression([l_value.stmt], all_expr.all_expr)]}
          | {block} block                                          {->[block.stmt]}
          | {funcall} func_call semicolon_id                       {->[func_call.stmt]}
          | {if} if_stmt                                           {->[if_stmt.stmt]}
          | {while} while cond do_id stmt                          {->[New stmt.while(cond.cond,[stmt.stmt])]}
          | {return_with_expr} return parentheses_expr semicolon_id     {->[New stmt.return_with(parentheses_expr.all_expr)]}
          | {return_expr} return all_expr semicolon_id                {->[New stmt.return_expr(all_expr.all_expr)]}
          | {return} return semicolon                            {->[New stmt.return()]};




    if_stmt{->stmt}  = {no_else} if cond then_id [then_stmt]:stmt     {->New stmt.no_else(cond.cond, New ifstmt([then_stmt.stmt]))}
              | {with_else} if cond then_id stmt_with_else else_id [else_stmt]:stmt   {->New stmt.with_else(cond.cond,New stmt_with_else([stmt_with_else.stmt],New my_stmtelse([else_stmt.stmt])))};


    stmt_with_else{->stmt*} = {semicolon} semicolon {->[]}
                     | {expression} l_value assign_id all_expr semicolon_id  {->[New stmt.expression_else([l_value.stmt], all_expr.all_expr)]}
                     | {block} block                                          {->[block.stmt]}
                     | {funcall} func_call semicolon_id                       {->[func_call.stmt]}
                     | {if_else} if_else_stmt                                   {->[if_else_stmt.stmt]}
                     | {while} while cond do_id stmt_with_else                   {->[New stmt.while_else(cond.cond, [stmt_with_else.stmt])]}       //while?
                     | {return_with_expr} return parentheses_expr semicolon_id   {->[New stmt.return_with2(parentheses_expr.all_expr)]}
                     | {return_expr} return all_expr semicolon_id               {->[New stmt.return_expr2(all_expr.all_expr)]}
                     | {return} return semicolon                          {->[New stmt.return2()]};

    if_else_stmt{->stmt} = if cond then_id [then_stmt]:stmt_with_else else_id [else_stmt]:stmt_with_else   {->New  stmt.with_else2(cond,New stmt_with_else2(New ifthenstmt([then_stmt.stmt]),[else_stmt.stmt]))};

    semicolon_id = semicolon;
    do_id = do;
    then_id = then;
    else_id = else;

    assign_id = assign;

    block{->stmt*}  = {block} curly_l_br stmt* curly_r_br     {->[stmt.stmt]};


    func_call{->stmt} = {with_par} var_name l_par parameters r_par    {->New stmt.func_call_with(var_name,parameters.all_expr)}
                | {without_par} var_name l_par r_par   {->New stmt.func_call_without(var_name)}  ;

    parameters{->all_expr} = {parameters} all_expr parameter* {->New all_expr.parameters(all_expr.all_expr,[parameter.all_expr])};
    parameter{->all_expr} = {parameter} comma all_expr    {->New all_expr.parameter(comma,all_expr.all_expr)}  ;

    l_value{->stmt} = {var} var_name                {->New stmt.var(var_name)}
              | {constant_string} constant_string      {->New stmt.string(constant_string)}
              | {l_value} l_value l_br all_expr r_br  {->New stmt.l_value(New name_value([l_value.stmt],l_br),New expr_value(all_expr.all_expr,r_br))} ;

    lbr_id = l_br;
    rbr_id = r_br;




    all_expr = {exprcalc} expr_calc        {->expr_calc.all_expr}
               | {gen} general_expr        {->general_expr.all_expr}    ;


    general_expr{->all_expr} =  {parexpr} parentheses_expr       {->parentheses_expr.all_expr}    ;

    parentheses_expr{->all_expr} =  {parexpr} l_par general_expr r_par  {-> general_expr.all_expr}     ;


    expr_calc{->all_expr} = {term} term                        {->term.all_expr}
                | {add_sub} expr_calc plus_minus term    {->New all_expr.add_sub(New add_sub_expr(expr_calc.all_expr,plus_minus),term.all_expr)} ;

    term{->all_expr} = {factor} factor                    {->factor.all_expr}
           | {rest_signs} term rest_signs factor  {->New all_expr.rest_signs(New rest_signs_expr(term.all_expr,rest_signs),factor.all_expr)}  ;



    factor{->all_expr} = {with_plmin} plus_minus2 factor      {->New all_expr.with_plmin(plus_minus2,factor.all_expr)}
            | {letter} constant_character          {->New all_expr.letter(constant_character)}
            | {l_value} l_value                     {->New all_expr.l_value(l_value.stmt)}
            | {expr_calc} l_par expr_calc r_par      {->expr_calc.all_expr}
            | {fun} func_call                         {->New all_expr.func(func_call.stmt)}
            | {constant} constant                    {->New all_expr.constant(constant)} ;



    plus_minus = {plus} plus {-> New plus_minus.plus(plus)}
                | {minus} minus {-> New plus_minus.minus(minus)};
    plus_minus2 = {plus} plus {-> New plus_minus2.plus(plus)}
                 | {minus} minus {-> New plus_minus2.minus(minus)};

    rest_signs = {mult} mult {-> New rest_signs.mult(mult)}
                | {div} div {-> New rest_signs.div(div)}
                | {div1} div_space  {-> New rest_signs.div1(div_space)}
                | {mod} mod_space  {-> New rest_signs.mod(mod_space)};


    cond =  {cond_exp} cond_expr  {->cond_expr.cond}   ;



    ass_signs = {equal} equal   {-> New ass_signs.equal(equal)}
                | {ne} not_equal    {-> New ass_signs.ne(not_equal)}
                | {small} smaller   {-> New ass_signs.small(smaller)}
                | {great} greater   {-> New ass_signs.great(greater)}
                | {smalle} smaller_eq   {-> New ass_signs.smalle(smaller_eq)}
                | {greate} greater_eq  {-> New ass_signs.greate(greater_eq)};

    cond_expr{->cond} = {term_cond2} term_cond2  {->term_cond2.cond}
                | {or} cond_expr logical_or term_cond2  {->New cond.or(cond_expr.cond,term_cond2.cond)};

    term_cond2{->cond} = {term_cond1} term_cond1 {->term_cond1.cond}
                 | {and} term_cond2 logical_and term_cond1 {->New cond.and(term_cond2.cond,term_cond1.cond)};

    term_cond1{->cond} = {factor_c} factor_cond {->factor_cond.cond}
                | {not} [l]:logical_not [r]:logical_not*  factor_cond    {->New cond.not(New nots(l ,[r]),factor_cond.cond)} ;

    logical_and = and;
    logical_or = or;
    logical_not = not {->New logical_not(not)};


    factor_cond{->cond} = {as_cond} ass_cond      {->ass_cond.cond}
                   | {par} l_par cond r_par       {->cond.cond}   ;

    ass_cond{->cond} =  {exprsigns} [before]:all_expr ass_signs [after]:all_expr  {->New cond.exprsigns(New ass_signs_cond(before.all_expr,ass_signs),after.all_expr)}  ;


Abstract Syntax Tree

    program = func_def;

    func_def = {all} [l]: func_def [r]: func_definition                         //done
               | {header_with} [l]:head [r]:func_def                            //done
               | {header} [l]:var_name [r]:func_def
               | {fpar_def} [l]:fpar [r]:fpar_right                          //done
               | {fpar_def_no_ref} [l]:no_ref [r]:func_def
               | {header_big} [l]:func_def [r]:func_def*
               | {int} int                                                 //done
               | {char} char                                               //done
               | {type} [l]:func_def [r]:func_def*
               | {constant} constant                                       //done
               | {nothing} nothing                                         //done
               | {array} array                                             //done
               | {array2} array
               | {fpar_type} [l]:func_def [r]:func_def
               | {var_def} [l]: var1 [r]: func_def                         //done
               | {var_help} var_name                                     //done
               | {fpar_type_helper} constant
               | {with_brs} func_def*
               | {without_brs} func_def*
               | {func_decl} func_def;




    func_definition = [l]:func_def* [r]:stmt*;
    head = [l]:var_name [r]:func_def;
    fpar = [l]:ref [r]:var_name;
    fpar_right = [l]: func_def* [r]: func_def;
    no_ref = [l]:var_name [r]:func_def*;
    var1 = [l]:var_name [r]:func_def*;



    stmt =    {expression} [l]: stmt* [r]: all_expr
              | {while} [l]:cond [r]: stmt*
              | {no_else} [l]: cond  [r]:ifstmt
              | {with_else}  [l]:cond  [r]: stmt_with_else
              | {expression_else} [l]:stmt*  [r]:all_expr
              | {while_else} [l]:cond  [r]:stmt*
              | {with_else2}   [l] :cond  [r]:stmt_with_else2
              | {func_call_with} [l]:var_name [r]: all_expr
              | {func_call_without} var_name
              | {var} var_name
              | {string} constant_string
              | {l_value}[l]: name_value [r]:expr_value
              | {return_with} all_expr
              | {return_expr} all_expr
              | {return}
              | {return_with2} all_expr
              | {return_expr2} all_expr
              | {return2};


    ifstmt = stmt*;

    stmt_with_else =  [l]: stmt* [r]:my_stmtelse;
    stmt_with_else2 = [l]: ifthenstmt [r]:stmt*;

    ifthenstmt = stmt*;

    my_stmtelse = stmt*;

    name_value = [l]: stmt* [r]: l_br;
    expr_value = [l]: all_expr [r]: r_br;




    all_expr =   {add_sub} [l]:add_sub_expr [r]:all_expr
                 | {rest_signs} [l]:rest_signs_expr [r]:all_expr
                 | {with_plmin} [l]:plus_minus2 [r]:all_expr
                 | {letter} constant_character
                 | {constant} constant
                 | {parameters} [l]: all_expr [r]:all_expr*
                 | {l_value} stmt
                 | {func} stmt
                 | {parameter} [l]:comma [r]: all_expr;


    rest_signs_expr = [l]:all_expr [r]:rest_signs;
    add_sub_expr = [l]:all_expr [r]:plus_minus;



    cond = {or} [l]:cond [r]:cond
            | {and} [l]:cond [r]:cond
            | {exprsigns} [l]:ass_signs_cond [r]:all_expr
            | {not} [l]:nots [r]:cond;

    nots = [l]:logical_not [r]:logical_not*;
    logical_not = not;

    ass_signs_cond = [l]:all_expr [r]:ass_signs;



     ass_signs = {equal} equal
                | {ne} not_equal
                | {small} smaller
                | {great} greater
                | {smalle} smaller_eq
                | {greate} greater_eq;

     rest_signs = {mult} mult
             | {div} div
             | {div1} div_space
             | {mod} mod_space;


     plus_minus = {plus} plus
                 | {minus} minus;

     plus_minus2 = {plus} plus
                  | {minus} minus;