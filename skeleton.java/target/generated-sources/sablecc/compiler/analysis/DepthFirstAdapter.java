/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAWithHeaderHelperBiggerHeader(AWithHeaderHelperBiggerHeader node)
    {
        defaultIn(node);
    }

    public void outAWithHeaderHelperBiggerHeader(AWithHeaderHelperBiggerHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithHeaderHelperBiggerHeader(AWithHeaderHelperBiggerHeader node)
    {
        inAWithHeaderHelperBiggerHeader(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getHeaderHelperBigger() != null)
        {
            node.getHeaderHelperBigger().apply(this);
        }
        if(node.getHeaderHelper2() != null)
        {
            node.getHeaderHelper2().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAWithHeaderHelperBiggerHeader(node);
    }

    public void inAWithoutHeaderHelperBiggerHeader(AWithoutHeaderHelperBiggerHeader node)
    {
        defaultIn(node);
    }

    public void outAWithoutHeaderHelperBiggerHeader(AWithoutHeaderHelperBiggerHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutHeaderHelperBiggerHeader(AWithoutHeaderHelperBiggerHeader node)
    {
        inAWithoutHeaderHelperBiggerHeader(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getHeaderHelper2() != null)
        {
            node.getHeaderHelper2().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAWithoutHeaderHelperBiggerHeader(node);
    }

    public void inAHeaderHelper(AHeaderHelper node)
    {
        defaultIn(node);
    }

    public void outAHeaderHelper(AHeaderHelper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderHelper(AHeaderHelper node)
    {
        inAHeaderHelper(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAHeaderHelper(node);
    }

    public void inAHeaderHelperBigger(AHeaderHelperBigger node)
    {
        defaultIn(node);
    }

    public void outAHeaderHelperBigger(AHeaderHelperBigger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderHelperBigger(AHeaderHelperBigger node)
    {
        inAHeaderHelperBigger(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        {
            List<PHeaderHelper> copy = new ArrayList<PHeaderHelper>(node.getHeaderHelper());
            for(PHeaderHelper e : copy)
            {
                e.apply(this);
            }
        }
        outAHeaderHelperBigger(node);
    }

    public void inAHeaderHelper2(AHeaderHelper2 node)
    {
        defaultIn(node);
    }

    public void outAHeaderHelper2(AHeaderHelper2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderHelper2(AHeaderHelper2 node)
    {
        inAHeaderHelper2(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAHeaderHelper2(node);
    }

    public void inAWithRefFparDef(AWithRefFparDef node)
    {
        defaultIn(node);
    }

    public void outAWithRefFparDef(AWithRefFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithRefFparDef(AWithRefFparDef node)
    {
        inAWithRefFparDef(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        {
            List<PVarDefHelper> copy = new ArrayList<PVarDefHelper>(node.getVarDefHelper());
            for(PVarDefHelper e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColonId() != null)
        {
            node.getColonId().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outAWithRefFparDef(node);
    }

    public void inANoRefFparDef(ANoRefFparDef node)
    {
        defaultIn(node);
    }

    public void outANoRefFparDef(ANoRefFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoRefFparDef(ANoRefFparDef node)
    {
        inANoRefFparDef(node);
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        {
            List<PVarDefHelper> copy = new ArrayList<PVarDefHelper>(node.getVarDefHelper());
            for(PVarDefHelper e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColonId() != null)
        {
            node.getColonId().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outANoRefFparDef(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inADtType(ADtType node)
    {
        defaultIn(node);
    }

    public void outADtType(ADtType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADtType(ADtType node)
    {
        inADtType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        {
            List<PTypeHelper> copy = new ArrayList<PTypeHelper>(node.getTypeHelper());
            for(PTypeHelper e : copy)
            {
                e.apply(this);
            }
        }
        outADtType(node);
    }

    public void inAArType(AArType node)
    {
        defaultIn(node);
    }

    public void outAArType(AArType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArType(AArType node)
    {
        inAArType(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArType(node);
    }

    public void inATypeHelper(ATypeHelper node)
    {
        defaultIn(node);
    }

    public void outATypeHelper(ATypeHelper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeHelper(ATypeHelper node)
    {
        inATypeHelper(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outATypeHelper(node);
    }

    public void inADtRetType(ADtRetType node)
    {
        defaultIn(node);
    }

    public void outADtRetType(ADtRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADtRetType(ADtRetType node)
    {
        inADtRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADtRetType(node);
    }

    public void inANothingRetType(ANothingRetType node)
    {
        defaultIn(node);
    }

    public void outANothingRetType(ANothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getNothing() != null)
        {
            node.getNothing().apply(this);
        }
        outANothingRetType(node);
    }

    public void inADtWithHelperFparType(ADtWithHelperFparType node)
    {
        defaultIn(node);
    }

    public void outADtWithHelperFparType(ADtWithHelperFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADtWithHelperFparType(ADtWithHelperFparType node)
    {
        inADtWithHelperFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getFparTypeHelper2() != null)
        {
            node.getFparTypeHelper2().apply(this);
        }
        outADtWithHelperFparType(node);
    }

    public void inADtWithoutHelperFparType(ADtWithoutHelperFparType node)
    {
        defaultIn(node);
    }

    public void outADtWithoutHelperFparType(ADtWithoutHelperFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADtWithoutHelperFparType(ADtWithoutHelperFparType node)
    {
        inADtWithoutHelperFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADtWithoutHelperFparType(node);
    }

    public void inAArrFparType(AArrFparType node)
    {
        defaultIn(node);
    }

    public void outAArrFparType(AArrFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrFparType(AArrFparType node)
    {
        inAArrFparType(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArrFparType(node);
    }

    public void inABrs(ABrs node)
    {
        defaultIn(node);
    }

    public void outABrs(ABrs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrs(ABrs node)
    {
        inABrs(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outABrs(node);
    }

    public void inAFparTypeHelper(AFparTypeHelper node)
    {
        defaultIn(node);
    }

    public void outAFparTypeHelper(AFparTypeHelper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparTypeHelper(AFparTypeHelper node)
    {
        inAFparTypeHelper(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAFparTypeHelper(node);
    }

    public void inAWithBrsFparTypeHelper2(AWithBrsFparTypeHelper2 node)
    {
        defaultIn(node);
    }

    public void outAWithBrsFparTypeHelper2(AWithBrsFparTypeHelper2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithBrsFparTypeHelper2(AWithBrsFparTypeHelper2 node)
    {
        inAWithBrsFparTypeHelper2(node);
        if(node.getBrs() != null)
        {
            node.getBrs().apply(this);
        }
        {
            List<PFparTypeHelper> copy = new ArrayList<PFparTypeHelper>(node.getFparTypeHelper());
            for(PFparTypeHelper e : copy)
            {
                e.apply(this);
            }
        }
        outAWithBrsFparTypeHelper2(node);
    }

    public void inAWithoutBrsFparTypeHelper2(AWithoutBrsFparTypeHelper2 node)
    {
        defaultIn(node);
    }

    public void outAWithoutBrsFparTypeHelper2(AWithoutBrsFparTypeHelper2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutBrsFparTypeHelper2(AWithoutBrsFparTypeHelper2 node)
    {
        inAWithoutBrsFparTypeHelper2(node);
        {
            List<PFparTypeHelper> copy = new ArrayList<PFparTypeHelper>(node.getFparTypeHelper());
            for(PFparTypeHelper e : copy)
            {
                e.apply(this);
            }
        }
        outAWithoutBrsFparTypeHelper2(node);
    }

    public void inAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        inAFuncDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFuncDefLocalDef(node);
    }

    public void inAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        inAFuncDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclLocalDef(node);
    }

    public void inAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        inAVarDefLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVarDefLocalDef(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        {
            List<PVarDefHelper> copy = new ArrayList<PVarDefHelper>(node.getVarDefHelper());
            for(PVarDefHelper e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColonId() != null)
        {
            node.getColonId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDef(node);
    }

    public void inAVarDefHelper(AVarDefHelper node)
    {
        defaultIn(node);
    }

    public void outAVarDefHelper(AVarDefHelper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefHelper(AVarDefHelper node)
    {
        inAVarDefHelper(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        outAVarDefHelper(node);
    }

    public void inAColonId(AColonId node)
    {
        defaultIn(node);
    }

    public void outAColonId(AColonId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColonId(AColonId node)
    {
        inAColonId(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAColonId(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inASemicolonStmt(ASemicolonStmt node)
    {
        defaultIn(node);
    }

    public void outASemicolonStmt(ASemicolonStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonStmt(ASemicolonStmt node)
    {
        inASemicolonStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonStmt(node);
    }

    public void inAExpressionStmt(AExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmt(AExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmt(AExpressionStmt node)
    {
        inAExpressionStmt(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getAssignId() != null)
        {
            node.getAssignId().apply(this);
        }
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAExpressionStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmt(node);
    }

    public void inAFuncallStmt(AFuncallStmt node)
    {
        defaultIn(node);
    }

    public void outAFuncallStmt(AFuncallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncallStmt(AFuncallStmt node)
    {
        inAFuncallStmt(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAFuncallStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDoId() != null)
        {
            node.getDoId().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAReturnWithExprStmt(AReturnWithExprStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnWithExprStmt(AReturnWithExprStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnWithExprStmt(AReturnWithExprStmt node)
    {
        inAReturnWithExprStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getParenthesesExpr() != null)
        {
            node.getParenthesesExpr().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAReturnWithExprStmt(node);
    }

    public void inAReturnExprStmt(AReturnExprStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnExprStmt(AReturnExprStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExprStmt(AReturnExprStmt node)
    {
        inAReturnExprStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAReturnExprStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfStmt(ANoElseIfStmt node)
    {
        inANoElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThenId() != null)
        {
            node.getThenId().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        outANoElseIfStmt(node);
    }

    public void inAWithElseIfStmt(AWithElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outAWithElseIfStmt(AWithElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseIfStmt(AWithElseIfStmt node)
    {
        inAWithElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThenId() != null)
        {
            node.getThenId().apply(this);
        }
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        if(node.getElseId() != null)
        {
            node.getElseId().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAWithElseIfStmt(node);
    }

    public void inASemicolonStmtWithElse(ASemicolonStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outASemicolonStmtWithElse(ASemicolonStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonStmtWithElse(ASemicolonStmtWithElse node)
    {
        inASemicolonStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonStmtWithElse(node);
    }

    public void inAExpressionStmtWithElse(AExpressionStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmtWithElse(AExpressionStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmtWithElse(AExpressionStmtWithElse node)
    {
        inAExpressionStmtWithElse(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getAssignId() != null)
        {
            node.getAssignId().apply(this);
        }
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAExpressionStmtWithElse(node);
    }

    public void inABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtWithElse(ABlockStmtWithElse node)
    {
        inABlockStmtWithElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmtWithElse(node);
    }

    public void inAFuncallStmtWithElse(AFuncallStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAFuncallStmtWithElse(AFuncallStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncallStmtWithElse(AFuncallStmtWithElse node)
    {
        inAFuncallStmtWithElse(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAFuncallStmtWithElse(node);
    }

    public void inAIfElseStmtWithElse(AIfElseStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmtWithElse(AIfElseStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmtWithElse(AIfElseStmtWithElse node)
    {
        inAIfElseStmtWithElse(node);
        if(node.getIfElseStmt() != null)
        {
            node.getIfElseStmt().apply(this);
        }
        outAIfElseStmtWithElse(node);
    }

    public void inAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        inAWhileStmtWithElse(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDoId() != null)
        {
            node.getDoId().apply(this);
        }
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        outAWhileStmtWithElse(node);
    }

    public void inAReturnWithExprStmtWithElse(AReturnWithExprStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAReturnWithExprStmtWithElse(AReturnWithExprStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnWithExprStmtWithElse(AReturnWithExprStmtWithElse node)
    {
        inAReturnWithExprStmtWithElse(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getParenthesesExpr() != null)
        {
            node.getParenthesesExpr().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAReturnWithExprStmtWithElse(node);
    }

    public void inAReturnExprStmtWithElse(AReturnExprStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAReturnExprStmtWithElse(AReturnExprStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExprStmtWithElse(AReturnExprStmtWithElse node)
    {
        inAReturnExprStmtWithElse(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        if(node.getSemicolonId() != null)
        {
            node.getSemicolonId().apply(this);
        }
        outAReturnExprStmtWithElse(node);
    }

    public void inAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        inAReturnStmtWithElse(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnStmtWithElse(node);
    }

    public void inAIfElseStmt(AIfElseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmt(AIfElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmt(AIfElseStmt node)
    {
        inAIfElseStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThenId() != null)
        {
            node.getThenId().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElseId() != null)
        {
            node.getElseId().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfElseStmt(node);
    }

    public void inASemicolonId(ASemicolonId node)
    {
        defaultIn(node);
    }

    public void outASemicolonId(ASemicolonId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonId(ASemicolonId node)
    {
        inASemicolonId(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonId(node);
    }

    public void inADoId(ADoId node)
    {
        defaultIn(node);
    }

    public void outADoId(ADoId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoId(ADoId node)
    {
        inADoId(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outADoId(node);
    }

    public void inAThenId(AThenId node)
    {
        defaultIn(node);
    }

    public void outAThenId(AThenId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThenId(AThenId node)
    {
        inAThenId(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAThenId(node);
    }

    public void inAElseId(AElseId node)
    {
        defaultIn(node);
    }

    public void outAElseId(AElseId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseId(AElseId node)
    {
        inAElseId(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseId(node);
    }

    public void inAAssignId(AAssignId node)
    {
        defaultIn(node);
    }

    public void outAAssignId(AAssignId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignId(AAssignId node)
    {
        inAAssignId(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignId(node);
    }

    public void inABlockBlock(ABlockBlock node)
    {
        defaultIn(node);
    }

    public void outABlockBlock(ABlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlock(ABlockBlock node)
    {
        inABlockBlock(node);
        if(node.getCurlyLBr() != null)
        {
            node.getCurlyLBr().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCurlyRBr() != null)
        {
            node.getCurlyRBr().apply(this);
        }
        outABlockBlock(node);
    }

    public void inAWithParFuncCall(AWithParFuncCall node)
    {
        defaultIn(node);
    }

    public void outAWithParFuncCall(AWithParFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithParFuncCall(AWithParFuncCall node)
    {
        inAWithParFuncCall(node);
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAWithParFuncCall(node);
    }

    public void inAWithoutParFuncCall(AWithoutParFuncCall node)
    {
        defaultIn(node);
    }

    public void outAWithoutParFuncCall(AWithoutParFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutParFuncCall(AWithoutParFuncCall node)
    {
        inAWithoutParFuncCall(node);
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAWithoutParFuncCall(node);
    }

    public void inAParametersParameters(AParametersParameters node)
    {
        defaultIn(node);
    }

    public void outAParametersParameters(AParametersParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersParameters(AParametersParameters node)
    {
        inAParametersParameters(node);
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        outAParametersParameters(node);
    }

    public void inAParameterParameter(AParameterParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterParameter(AParameterParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterParameter(AParameterParameter node)
    {
        inAParameterParameter(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        outAParameterParameter(node);
    }

    public void inAVarLValue(AVarLValue node)
    {
        defaultIn(node);
    }

    public void outAVarLValue(AVarLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarLValue(AVarLValue node)
    {
        inAVarLValue(node);
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        outAVarLValue(node);
    }

    public void inAConstantStringLValue(AConstantStringLValue node)
    {
        defaultIn(node);
    }

    public void outAConstantStringLValue(AConstantStringLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantStringLValue(AConstantStringLValue node)
    {
        inAConstantStringLValue(node);
        if(node.getConstantString() != null)
        {
            node.getConstantString().apply(this);
        }
        outAConstantStringLValue(node);
    }

    public void inALValueLValue(ALValueLValue node)
    {
        defaultIn(node);
    }

    public void outALValueLValue(ALValueLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueLValue(ALValueLValue node)
    {
        inALValueLValue(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getLbrId() != null)
        {
            node.getLbrId().apply(this);
        }
        if(node.getAllExpr() != null)
        {
            node.getAllExpr().apply(this);
        }
        if(node.getRbrId() != null)
        {
            node.getRbrId().apply(this);
        }
        outALValueLValue(node);
    }

    public void inALbrId(ALbrId node)
    {
        defaultIn(node);
    }

    public void outALbrId(ALbrId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALbrId(ALbrId node)
    {
        inALbrId(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        outALbrId(node);
    }

    public void inARbrId(ARbrId node)
    {
        defaultIn(node);
    }

    public void outARbrId(ARbrId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARbrId(ARbrId node)
    {
        inARbrId(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outARbrId(node);
    }

    public void inAExprcalcAllExpr(AExprcalcAllExpr node)
    {
        defaultIn(node);
    }

    public void outAExprcalcAllExpr(AExprcalcAllExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprcalcAllExpr(AExprcalcAllExpr node)
    {
        inAExprcalcAllExpr(node);
        if(node.getExprCalc() != null)
        {
            node.getExprCalc().apply(this);
        }
        outAExprcalcAllExpr(node);
    }

    public void inAGenAllExpr(AGenAllExpr node)
    {
        defaultIn(node);
    }

    public void outAGenAllExpr(AGenAllExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGenAllExpr(AGenAllExpr node)
    {
        inAGenAllExpr(node);
        if(node.getGeneralExpr() != null)
        {
            node.getGeneralExpr().apply(this);
        }
        outAGenAllExpr(node);
    }

    public void inAParexprGeneralExpr(AParexprGeneralExpr node)
    {
        defaultIn(node);
    }

    public void outAParexprGeneralExpr(AParexprGeneralExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParexprGeneralExpr(AParexprGeneralExpr node)
    {
        inAParexprGeneralExpr(node);
        if(node.getParenthesesExpr() != null)
        {
            node.getParenthesesExpr().apply(this);
        }
        outAParexprGeneralExpr(node);
    }

    public void inATermExprCalc(ATermExprCalc node)
    {
        defaultIn(node);
    }

    public void outATermExprCalc(ATermExprCalc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExprCalc(ATermExprCalc node)
    {
        inATermExprCalc(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExprCalc(node);
    }

    public void inAAddSubExprCalc(AAddSubExprCalc node)
    {
        defaultIn(node);
    }

    public void outAAddSubExprCalc(AAddSubExprCalc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddSubExprCalc(AAddSubExprCalc node)
    {
        inAAddSubExprCalc(node);
        if(node.getExprCalc() != null)
        {
            node.getExprCalc().apply(this);
        }
        if(node.getPlusMinus() != null)
        {
            node.getPlusMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAddSubExprCalc(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inARestSignsTerm(ARestSignsTerm node)
    {
        defaultIn(node);
    }

    public void outARestSignsTerm(ARestSignsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestSignsTerm(ARestSignsTerm node)
    {
        inARestSignsTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getRestSigns() != null)
        {
            node.getRestSigns().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outARestSignsTerm(node);
    }

    public void inANumberFactor(ANumberFactor node)
    {
        defaultIn(node);
    }

    public void outANumberFactor(ANumberFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberFactor(ANumberFactor node)
    {
        inANumberFactor(node);
        if(node.getExprSigns() != null)
        {
            node.getExprSigns().apply(this);
        }
        outANumberFactor(node);
    }

    public void inALetterFactor(ALetterFactor node)
    {
        defaultIn(node);
    }

    public void outALetterFactor(ALetterFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetterFactor(ALetterFactor node)
    {
        inALetterFactor(node);
        if(node.getConstantCharacter() != null)
        {
            node.getConstantCharacter().apply(this);
        }
        outALetterFactor(node);
    }

    public void inALValueFactor(ALValueFactor node)
    {
        defaultIn(node);
    }

    public void outALValueFactor(ALValueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueFactor(ALValueFactor node)
    {
        inALValueFactor(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALValueFactor(node);
    }

    public void inAExprCalcFactor(AExprCalcFactor node)
    {
        defaultIn(node);
    }

    public void outAExprCalcFactor(AExprCalcFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCalcFactor(AExprCalcFactor node)
    {
        inAExprCalcFactor(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExprCalc() != null)
        {
            node.getExprCalc().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExprCalcFactor(node);
    }

    public void inAFunFactor(AFunFactor node)
    {
        defaultIn(node);
    }

    public void outAFunFactor(AFunFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunFactor(AFunFactor node)
    {
        inAFunFactor(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFunFactor(node);
    }

    public void inAWithPlminExprSigns(AWithPlminExprSigns node)
    {
        defaultIn(node);
    }

    public void outAWithPlminExprSigns(AWithPlminExprSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithPlminExprSigns(AWithPlminExprSigns node)
    {
        inAWithPlminExprSigns(node);
        if(node.getPlusMinus2() != null)
        {
            node.getPlusMinus2().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAWithPlminExprSigns(node);
    }

    public void inAWithoutPlminExprSigns(AWithoutPlminExprSigns node)
    {
        defaultIn(node);
    }

    public void outAWithoutPlminExprSigns(AWithoutPlminExprSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutPlminExprSigns(AWithoutPlminExprSigns node)
    {
        inAWithoutPlminExprSigns(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAWithoutPlminExprSigns(node);
    }

    public void inAParexprParenthesesExpr(AParexprParenthesesExpr node)
    {
        defaultIn(node);
    }

    public void outAParexprParenthesesExpr(AParexprParenthesesExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParexprParenthesesExpr(AParexprParenthesesExpr node)
    {
        inAParexprParenthesesExpr(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getGeneralExpr() != null)
        {
            node.getGeneralExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParexprParenthesesExpr(node);
    }

    public void inAPlusPlusMinus(APlusPlusMinus node)
    {
        defaultIn(node);
    }

    public void outAPlusPlusMinus(APlusPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPlusMinus(APlusPlusMinus node)
    {
        inAPlusPlusMinus(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusPlusMinus(node);
    }

    public void inAMinusPlusMinus(AMinusPlusMinus node)
    {
        defaultIn(node);
    }

    public void outAMinusPlusMinus(AMinusPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusPlusMinus(AMinusPlusMinus node)
    {
        inAMinusPlusMinus(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusPlusMinus(node);
    }

    public void inAPlusPlusMinus2(APlusPlusMinus2 node)
    {
        defaultIn(node);
    }

    public void outAPlusPlusMinus2(APlusPlusMinus2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPlusMinus2(APlusPlusMinus2 node)
    {
        inAPlusPlusMinus2(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusPlusMinus2(node);
    }

    public void inAMinusPlusMinus2(AMinusPlusMinus2 node)
    {
        defaultIn(node);
    }

    public void outAMinusPlusMinus2(AMinusPlusMinus2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusPlusMinus2(AMinusPlusMinus2 node)
    {
        inAMinusPlusMinus2(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusPlusMinus2(node);
    }

    public void inAMultRestSigns(AMultRestSigns node)
    {
        defaultIn(node);
    }

    public void outAMultRestSigns(AMultRestSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultRestSigns(AMultRestSigns node)
    {
        inAMultRestSigns(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultRestSigns(node);
    }

    public void inADivRestSigns(ADivRestSigns node)
    {
        defaultIn(node);
    }

    public void outADivRestSigns(ADivRestSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivRestSigns(ADivRestSigns node)
    {
        inADivRestSigns(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivRestSigns(node);
    }

    public void inADiv1RestSigns(ADiv1RestSigns node)
    {
        defaultIn(node);
    }

    public void outADiv1RestSigns(ADiv1RestSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiv1RestSigns(ADiv1RestSigns node)
    {
        inADiv1RestSigns(node);
        if(node.getDiv1() != null)
        {
            node.getDiv1().apply(this);
        }
        outADiv1RestSigns(node);
    }

    public void inAModRestSigns(AModRestSigns node)
    {
        defaultIn(node);
    }

    public void outAModRestSigns(AModRestSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModRestSigns(AModRestSigns node)
    {
        inAModRestSigns(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModRestSigns(node);
    }

    public void inACondInParCond(ACondInParCond node)
    {
        defaultIn(node);
    }

    public void outACondInParCond(ACondInParCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondInParCond(ACondInParCond node)
    {
        inACondInParCond(node);
        if(node.getCondInPar() != null)
        {
            node.getCondInPar().apply(this);
        }
        outACondInParCond(node);
    }

    public void inACondExpCond(ACondExpCond node)
    {
        defaultIn(node);
    }

    public void outACondExpCond(ACondExpCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondExpCond(ACondExpCond node)
    {
        inACondExpCond(node);
        if(node.getCondExpr() != null)
        {
            node.getCondExpr().apply(this);
        }
        outACondExpCond(node);
    }

    public void inAExprsignsAssCond(AExprsignsAssCond node)
    {
        defaultIn(node);
    }

    public void outAExprsignsAssCond(AExprsignsAssCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprsignsAssCond(AExprsignsAssCond node)
    {
        inAExprsignsAssCond(node);
        if(node.getBefore() != null)
        {
            node.getBefore().apply(this);
        }
        if(node.getAssSigns() != null)
        {
            node.getAssSigns().apply(this);
        }
        if(node.getAfter() != null)
        {
            node.getAfter().apply(this);
        }
        outAExprsignsAssCond(node);
    }

    public void inACondparCondInPar(ACondparCondInPar node)
    {
        defaultIn(node);
    }

    public void outACondparCondInPar(ACondparCondInPar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondparCondInPar(ACondparCondInPar node)
    {
        inACondparCondInPar(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACondparCondInPar(node);
    }

    public void inAEqualAssSigns(AEqualAssSigns node)
    {
        defaultIn(node);
    }

    public void outAEqualAssSigns(AEqualAssSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualAssSigns(AEqualAssSigns node)
    {
        inAEqualAssSigns(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualAssSigns(node);
    }

    public void inANeAssSigns(ANeAssSigns node)
    {
        defaultIn(node);
    }

    public void outANeAssSigns(ANeAssSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeAssSigns(ANeAssSigns node)
    {
        inANeAssSigns(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANeAssSigns(node);
    }

    public void inASmallAssSigns(ASmallAssSigns node)
    {
        defaultIn(node);
    }

    public void outASmallAssSigns(ASmallAssSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmallAssSigns(ASmallAssSigns node)
    {
        inASmallAssSigns(node);
        if(node.getSmaller() != null)
        {
            node.getSmaller().apply(this);
        }
        outASmallAssSigns(node);
    }

    public void inAGreatAssSigns(AGreatAssSigns node)
    {
        defaultIn(node);
    }

    public void outAGreatAssSigns(AGreatAssSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreatAssSigns(AGreatAssSigns node)
    {
        inAGreatAssSigns(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreatAssSigns(node);
    }

    public void inASmalleAssSigns(ASmalleAssSigns node)
    {
        defaultIn(node);
    }

    public void outASmalleAssSigns(ASmalleAssSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmalleAssSigns(ASmalleAssSigns node)
    {
        inASmalleAssSigns(node);
        if(node.getSmallerEq() != null)
        {
            node.getSmallerEq().apply(this);
        }
        outASmalleAssSigns(node);
    }

    public void inAGreateAssSigns(AGreateAssSigns node)
    {
        defaultIn(node);
    }

    public void outAGreateAssSigns(AGreateAssSigns node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreateAssSigns(AGreateAssSigns node)
    {
        inAGreateAssSigns(node);
        if(node.getGreaterEq() != null)
        {
            node.getGreaterEq().apply(this);
        }
        outAGreateAssSigns(node);
    }

    public void inATermCond2CondExpr(ATermCond2CondExpr node)
    {
        defaultIn(node);
    }

    public void outATermCond2CondExpr(ATermCond2CondExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermCond2CondExpr(ATermCond2CondExpr node)
    {
        inATermCond2CondExpr(node);
        if(node.getTermCond2() != null)
        {
            node.getTermCond2().apply(this);
        }
        outATermCond2CondExpr(node);
    }

    public void inAOrCondExpr(AOrCondExpr node)
    {
        defaultIn(node);
    }

    public void outAOrCondExpr(AOrCondExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCondExpr(AOrCondExpr node)
    {
        inAOrCondExpr(node);
        if(node.getCondExpr() != null)
        {
            node.getCondExpr().apply(this);
        }
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        if(node.getTermCond2() != null)
        {
            node.getTermCond2().apply(this);
        }
        outAOrCondExpr(node);
    }

    public void inATermCond1TermCond2(ATermCond1TermCond2 node)
    {
        defaultIn(node);
    }

    public void outATermCond1TermCond2(ATermCond1TermCond2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermCond1TermCond2(ATermCond1TermCond2 node)
    {
        inATermCond1TermCond2(node);
        if(node.getTermCond1() != null)
        {
            node.getTermCond1().apply(this);
        }
        outATermCond1TermCond2(node);
    }

    public void inAAndTermCond2(AAndTermCond2 node)
    {
        defaultIn(node);
    }

    public void outAAndTermCond2(AAndTermCond2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndTermCond2(AAndTermCond2 node)
    {
        inAAndTermCond2(node);
        if(node.getTermCond2() != null)
        {
            node.getTermCond2().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getTermCond1() != null)
        {
            node.getTermCond1().apply(this);
        }
        outAAndTermCond2(node);
    }

    public void inAFactorCTermCond1(AFactorCTermCond1 node)
    {
        defaultIn(node);
    }

    public void outAFactorCTermCond1(AFactorCTermCond1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorCTermCond1(AFactorCTermCond1 node)
    {
        inAFactorCTermCond1(node);
        if(node.getFactorCond() != null)
        {
            node.getFactorCond().apply(this);
        }
        outAFactorCTermCond1(node);
    }

    public void inANotTermCond1(ANotTermCond1 node)
    {
        defaultIn(node);
    }

    public void outANotTermCond1(ANotTermCond1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotTermCond1(ANotTermCond1 node)
    {
        inANotTermCond1(node);
        if(node.getLogicalNot() != null)
        {
            node.getLogicalNot().apply(this);
        }
        if(node.getFactorCond() != null)
        {
            node.getFactorCond().apply(this);
        }
        outANotTermCond1(node);
    }

    public void inALogicalAnd(ALogicalAnd node)
    {
        defaultIn(node);
    }

    public void outALogicalAnd(ALogicalAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAnd(ALogicalAnd node)
    {
        inALogicalAnd(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outALogicalAnd(node);
    }

    public void inALogicalOr(ALogicalOr node)
    {
        defaultIn(node);
    }

    public void outALogicalOr(ALogicalOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOr(ALogicalOr node)
    {
        inALogicalOr(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outALogicalOr(node);
    }

    public void inALogicalNot(ALogicalNot node)
    {
        defaultIn(node);
    }

    public void outALogicalNot(ALogicalNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalNot(ALogicalNot node)
    {
        inALogicalNot(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outALogicalNot(node);
    }

    public void inAAsCondFactorCond(AAsCondFactorCond node)
    {
        defaultIn(node);
    }

    public void outAAsCondFactorCond(AAsCondFactorCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsCondFactorCond(AAsCondFactorCond node)
    {
        inAAsCondFactorCond(node);
        if(node.getAssCond() != null)
        {
            node.getAssCond().apply(this);
        }
        outAAsCondFactorCond(node);
    }
}
