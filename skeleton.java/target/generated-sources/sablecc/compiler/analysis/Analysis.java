/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFuncDef(AFuncDef node);
    void caseAWithHeaderHelperBiggerHeader(AWithHeaderHelperBiggerHeader node);
    void caseAWithoutHeaderHelperBiggerHeader(AWithoutHeaderHelperBiggerHeader node);
    void caseAHeaderHelper(AHeaderHelper node);
    void caseAHeaderHelperBigger(AHeaderHelperBigger node);
    void caseAHeaderHelper2(AHeaderHelper2 node);
    void caseAWithRefFparDef(AWithRefFparDef node);
    void caseANoRefFparDef(ANoRefFparDef node);
    void caseAIntDataType(AIntDataType node);
    void caseACharDataType(ACharDataType node);
    void caseADtType(ADtType node);
    void caseAArType(AArType node);
    void caseATypeHelper(ATypeHelper node);
    void caseADtRetType(ADtRetType node);
    void caseANothingRetType(ANothingRetType node);
    void caseADtWithHelperFparType(ADtWithHelperFparType node);
    void caseADtWithoutHelperFparType(ADtWithoutHelperFparType node);
    void caseAArrFparType(AArrFparType node);
    void caseABrs(ABrs node);
    void caseAFparTypeHelper(AFparTypeHelper node);
    void caseAWithBrsFparTypeHelper2(AWithBrsFparTypeHelper2 node);
    void caseAWithoutBrsFparTypeHelper2(AWithoutBrsFparTypeHelper2 node);
    void caseAFuncDefLocalDef(AFuncDefLocalDef node);
    void caseAFuncDeclLocalDef(AFuncDeclLocalDef node);
    void caseAVarDefLocalDef(AVarDefLocalDef node);
    void caseAVarDef(AVarDef node);
    void caseAVarDefHelper(AVarDefHelper node);
    void caseAColonId(AColonId node);
    void caseAFuncDecl(AFuncDecl node);
    void caseASemicolonStmt(ASemicolonStmt node);
    void caseAExpressionStmt(AExpressionStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAFuncallStmt(AFuncallStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAReturnWithExprStmt(AReturnWithExprStmt node);
    void caseAReturnExprStmt(AReturnExprStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseANoElseIfStmt(ANoElseIfStmt node);
    void caseAWithElseIfStmt(AWithElseIfStmt node);
    void caseASemicolonStmtWithElse(ASemicolonStmtWithElse node);
    void caseAExpressionStmtWithElse(AExpressionStmtWithElse node);
    void caseABlockStmtWithElse(ABlockStmtWithElse node);
    void caseAFuncallStmtWithElse(AFuncallStmtWithElse node);
    void caseAIfElseStmtWithElse(AIfElseStmtWithElse node);
    void caseAWhileStmtWithElse(AWhileStmtWithElse node);
    void caseAReturnWithExprStmtWithElse(AReturnWithExprStmtWithElse node);
    void caseAReturnExprStmtWithElse(AReturnExprStmtWithElse node);
    void caseAReturnStmtWithElse(AReturnStmtWithElse node);
    void caseAIfElseStmt(AIfElseStmt node);
    void caseASemicolonId(ASemicolonId node);
    void caseADoId(ADoId node);
    void caseAThenId(AThenId node);
    void caseAElseId(AElseId node);
    void caseAAssignId(AAssignId node);
    void caseABlockBlock(ABlockBlock node);
    void caseAWithParFuncCall(AWithParFuncCall node);
    void caseAWithoutParFuncCall(AWithoutParFuncCall node);
    void caseAParametersParameters(AParametersParameters node);
    void caseAParameterParameter(AParameterParameter node);
    void caseAVarLValue(AVarLValue node);
    void caseAConstantStringLValue(AConstantStringLValue node);
    void caseALValueLValue(ALValueLValue node);
    void caseALbrId(ALbrId node);
    void caseARbrId(ARbrId node);
    void caseAExprcalcAllExpr(AExprcalcAllExpr node);
    void caseAGenAllExpr(AGenAllExpr node);
    void caseAParexprGeneralExpr(AParexprGeneralExpr node);
    void caseATermExprCalc(ATermExprCalc node);
    void caseAAddSubExprCalc(AAddSubExprCalc node);
    void caseAFactorTerm(AFactorTerm node);
    void caseARestSignsTerm(ARestSignsTerm node);
    void caseANumberFactor(ANumberFactor node);
    void caseALetterFactor(ALetterFactor node);
    void caseALValueFactor(ALValueFactor node);
    void caseAExprCalcFactor(AExprCalcFactor node);
    void caseAFunFactor(AFunFactor node);
    void caseAWithPlminExprSigns(AWithPlminExprSigns node);
    void caseAWithoutPlminExprSigns(AWithoutPlminExprSigns node);
    void caseAParexprParenthesesExpr(AParexprParenthesesExpr node);
    void caseAPlusPlusMinus(APlusPlusMinus node);
    void caseAMinusPlusMinus(AMinusPlusMinus node);
    void caseAPlusPlusMinus2(APlusPlusMinus2 node);
    void caseAMinusPlusMinus2(AMinusPlusMinus2 node);
    void caseAMultRestSigns(AMultRestSigns node);
    void caseADivRestSigns(ADivRestSigns node);
    void caseADiv1RestSigns(ADiv1RestSigns node);
    void caseAModRestSigns(AModRestSigns node);
    void caseACondInParCond(ACondInParCond node);
    void caseACondExpCond(ACondExpCond node);
    void caseAExprsignsAssCond(AExprsignsAssCond node);
    void caseACondparCondInPar(ACondparCondInPar node);
    void caseAEqualAssSigns(AEqualAssSigns node);
    void caseANeAssSigns(ANeAssSigns node);
    void caseASmallAssSigns(ASmallAssSigns node);
    void caseAGreatAssSigns(AGreatAssSigns node);
    void caseASmalleAssSigns(ASmalleAssSigns node);
    void caseAGreateAssSigns(AGreateAssSigns node);
    void caseATermCond2CondExpr(ATermCond2CondExpr node);
    void caseAOrCondExpr(AOrCondExpr node);
    void caseATermCond1TermCond2(ATermCond1TermCond2 node);
    void caseAAndTermCond2(AAndTermCond2 node);
    void caseAFactorCTermCond1(AFactorCTermCond1 node);
    void caseANotTermCond1(ANotTermCond1 node);
    void caseALogicalAnd(ALogicalAnd node);
    void caseALogicalOr(ALogicalOr node);
    void caseALogicalNot(ALogicalNot node);
    void caseAAsCondFactorCond(AAsCondFactorCond node);

    void caseTAnd(TAnd node);
    void caseTChar(TChar node);
    void caseTDiv1(TDiv1 node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTMod(TMod node);
    void caseTNot(TNot node);
    void caseTNothing(TNothing node);
    void caseTOr(TOr node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTSpace(TSpace node);
    void caseTVarName(TVarName node);
    void caseTConstant(TConstant node);
    void caseTConstantCharacter(TConstantCharacter node);
    void caseTConstantString(TConstantString node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTCommentLine(TCommentLine node);
    void caseTMulCommentLine(TMulCommentLine node);
    void caseTArray(TArray node);
    void caseTAnotherType(TAnotherType node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTCurlyLBr(TCurlyLBr node);
    void caseTCurlyRBr(TCurlyRBr node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEqual(TEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTGreater(TGreater node);
    void caseTSmaller(TSmaller node);
    void caseTSmallerEq(TSmallerEq node);
    void caseTGreaterEq(TGreaterEq node);
    void caseEOF(EOF node);
}
