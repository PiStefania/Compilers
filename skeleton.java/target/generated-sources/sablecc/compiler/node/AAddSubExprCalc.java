/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AAddSubExprCalc extends PExprCalc
{
    private PExprCalc _exprCalc_;
    private PPlusMinus _plusMinus_;
    private PTerm _term_;

    public AAddSubExprCalc()
    {
        // Constructor
    }

    public AAddSubExprCalc(
        @SuppressWarnings("hiding") PExprCalc _exprCalc_,
        @SuppressWarnings("hiding") PPlusMinus _plusMinus_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setExprCalc(_exprCalc_);

        setPlusMinus(_plusMinus_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new AAddSubExprCalc(
            cloneNode(this._exprCalc_),
            cloneNode(this._plusMinus_),
            cloneNode(this._term_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddSubExprCalc(this);
    }

    public PExprCalc getExprCalc()
    {
        return this._exprCalc_;
    }

    public void setExprCalc(PExprCalc node)
    {
        if(this._exprCalc_ != null)
        {
            this._exprCalc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprCalc_ = node;
    }

    public PPlusMinus getPlusMinus()
    {
        return this._plusMinus_;
    }

    public void setPlusMinus(PPlusMinus node)
    {
        if(this._plusMinus_ != null)
        {
            this._plusMinus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plusMinus_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exprCalc_)
            + toString(this._plusMinus_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exprCalc_ == child)
        {
            this._exprCalc_ = null;
            return;
        }

        if(this._plusMinus_ == child)
        {
            this._plusMinus_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exprCalc_ == oldChild)
        {
            setExprCalc((PExprCalc) newChild);
            return;
        }

        if(this._plusMinus_ == oldChild)
        {
            setPlusMinus((PPlusMinus) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
