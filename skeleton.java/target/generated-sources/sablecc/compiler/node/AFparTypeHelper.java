/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFparTypeHelper extends PFparTypeHelper
{
    private TLBr _lBr_;
    private TConstant _constant_;
    private TRBr _rBr_;

    public AFparTypeHelper()
    {
        // Constructor
    }

    public AFparTypeHelper(
        @SuppressWarnings("hiding") TLBr _lBr_,
        @SuppressWarnings("hiding") TConstant _constant_,
        @SuppressWarnings("hiding") TRBr _rBr_)
    {
        // Constructor
        setLBr(_lBr_);

        setConstant(_constant_);

        setRBr(_rBr_);

    }

    @Override
    public Object clone()
    {
        return new AFparTypeHelper(
            cloneNode(this._lBr_),
            cloneNode(this._constant_),
            cloneNode(this._rBr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFparTypeHelper(this);
    }

    public TLBr getLBr()
    {
        return this._lBr_;
    }

    public void setLBr(TLBr node)
    {
        if(this._lBr_ != null)
        {
            this._lBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBr_ = node;
    }

    public TConstant getConstant()
    {
        return this._constant_;
    }

    public void setConstant(TConstant node)
    {
        if(this._constant_ != null)
        {
            this._constant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constant_ = node;
    }

    public TRBr getRBr()
    {
        return this._rBr_;
    }

    public void setRBr(TRBr node)
    {
        if(this._rBr_ != null)
        {
            this._rBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBr_)
            + toString(this._constant_)
            + toString(this._rBr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBr_ == child)
        {
            this._lBr_ = null;
            return;
        }

        if(this._constant_ == child)
        {
            this._constant_ = null;
            return;
        }

        if(this._rBr_ == child)
        {
            this._rBr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBr_ == oldChild)
        {
            setLBr((TLBr) newChild);
            return;
        }

        if(this._constant_ == oldChild)
        {
            setConstant((TConstant) newChild);
            return;
        }

        if(this._rBr_ == oldChild)
        {
            setRBr((TRBr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
