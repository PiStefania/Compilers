/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AHeaderHelper2 extends PHeaderHelper2
{
    private TRPar _rPar_;
    private TColon _colon_;

    public AHeaderHelper2()
    {
        // Constructor
    }

    public AHeaderHelper2(
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TColon _colon_)
    {
        // Constructor
        setRPar(_rPar_);

        setColon(_colon_);

    }

    @Override
    public Object clone()
    {
        return new AHeaderHelper2(
            cloneNode(this._rPar_),
            cloneNode(this._colon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeaderHelper2(this);
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rPar_)
            + toString(this._colon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
