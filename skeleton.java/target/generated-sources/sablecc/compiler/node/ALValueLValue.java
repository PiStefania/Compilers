/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ALValueLValue extends PLValue
{
    private PLValue _lValue_;
    private PLbrId _lbrId_;
    private PAllExpr _allExpr_;
    private PRbrId _rbrId_;

    public ALValueLValue()
    {
        // Constructor
    }

    public ALValueLValue(
        @SuppressWarnings("hiding") PLValue _lValue_,
        @SuppressWarnings("hiding") PLbrId _lbrId_,
        @SuppressWarnings("hiding") PAllExpr _allExpr_,
        @SuppressWarnings("hiding") PRbrId _rbrId_)
    {
        // Constructor
        setLValue(_lValue_);

        setLbrId(_lbrId_);

        setAllExpr(_allExpr_);

        setRbrId(_rbrId_);

    }

    @Override
    public Object clone()
    {
        return new ALValueLValue(
            cloneNode(this._lValue_),
            cloneNode(this._lbrId_),
            cloneNode(this._allExpr_),
            cloneNode(this._rbrId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALValueLValue(this);
    }

    public PLValue getLValue()
    {
        return this._lValue_;
    }

    public void setLValue(PLValue node)
    {
        if(this._lValue_ != null)
        {
            this._lValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lValue_ = node;
    }

    public PLbrId getLbrId()
    {
        return this._lbrId_;
    }

    public void setLbrId(PLbrId node)
    {
        if(this._lbrId_ != null)
        {
            this._lbrId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbrId_ = node;
    }

    public PAllExpr getAllExpr()
    {
        return this._allExpr_;
    }

    public void setAllExpr(PAllExpr node)
    {
        if(this._allExpr_ != null)
        {
            this._allExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._allExpr_ = node;
    }

    public PRbrId getRbrId()
    {
        return this._rbrId_;
    }

    public void setRbrId(PRbrId node)
    {
        if(this._rbrId_ != null)
        {
            this._rbrId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbrId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lValue_)
            + toString(this._lbrId_)
            + toString(this._allExpr_)
            + toString(this._rbrId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lValue_ == child)
        {
            this._lValue_ = null;
            return;
        }

        if(this._lbrId_ == child)
        {
            this._lbrId_ = null;
            return;
        }

        if(this._allExpr_ == child)
        {
            this._allExpr_ = null;
            return;
        }

        if(this._rbrId_ == child)
        {
            this._rbrId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lValue_ == oldChild)
        {
            setLValue((PLValue) newChild);
            return;
        }

        if(this._lbrId_ == oldChild)
        {
            setLbrId((PLbrId) newChild);
            return;
        }

        if(this._allExpr_ == oldChild)
        {
            setAllExpr((PAllExpr) newChild);
            return;
        }

        if(this._rbrId_ == oldChild)
        {
            setRbrId((PRbrId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
