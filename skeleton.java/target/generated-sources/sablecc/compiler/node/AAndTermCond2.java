/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AAndTermCond2 extends PTermCond2
{
    private PTermCond2 _termCond2_;
    private PLogicalAnd _logicalAnd_;
    private PTermCond1 _termCond1_;

    public AAndTermCond2()
    {
        // Constructor
    }

    public AAndTermCond2(
        @SuppressWarnings("hiding") PTermCond2 _termCond2_,
        @SuppressWarnings("hiding") PLogicalAnd _logicalAnd_,
        @SuppressWarnings("hiding") PTermCond1 _termCond1_)
    {
        // Constructor
        setTermCond2(_termCond2_);

        setLogicalAnd(_logicalAnd_);

        setTermCond1(_termCond1_);

    }

    @Override
    public Object clone()
    {
        return new AAndTermCond2(
            cloneNode(this._termCond2_),
            cloneNode(this._logicalAnd_),
            cloneNode(this._termCond1_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndTermCond2(this);
    }

    public PTermCond2 getTermCond2()
    {
        return this._termCond2_;
    }

    public void setTermCond2(PTermCond2 node)
    {
        if(this._termCond2_ != null)
        {
            this._termCond2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termCond2_ = node;
    }

    public PLogicalAnd getLogicalAnd()
    {
        return this._logicalAnd_;
    }

    public void setLogicalAnd(PLogicalAnd node)
    {
        if(this._logicalAnd_ != null)
        {
            this._logicalAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalAnd_ = node;
    }

    public PTermCond1 getTermCond1()
    {
        return this._termCond1_;
    }

    public void setTermCond1(PTermCond1 node)
    {
        if(this._termCond1_ != null)
        {
            this._termCond1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termCond1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._termCond2_)
            + toString(this._logicalAnd_)
            + toString(this._termCond1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._termCond2_ == child)
        {
            this._termCond2_ = null;
            return;
        }

        if(this._logicalAnd_ == child)
        {
            this._logicalAnd_ = null;
            return;
        }

        if(this._termCond1_ == child)
        {
            this._termCond1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._termCond2_ == oldChild)
        {
            setTermCond2((PTermCond2) newChild);
            return;
        }

        if(this._logicalAnd_ == oldChild)
        {
            setLogicalAnd((PLogicalAnd) newChild);
            return;
        }

        if(this._termCond1_ == oldChild)
        {
            setTermCond1((PTermCond1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
