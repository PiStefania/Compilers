/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AExprsignsAssCond extends PAssCond
{
    private PAllExpr _before_;
    private PAssSigns _assSigns_;
    private PAllExpr _after_;

    public AExprsignsAssCond()
    {
        // Constructor
    }

    public AExprsignsAssCond(
        @SuppressWarnings("hiding") PAllExpr _before_,
        @SuppressWarnings("hiding") PAssSigns _assSigns_,
        @SuppressWarnings("hiding") PAllExpr _after_)
    {
        // Constructor
        setBefore(_before_);

        setAssSigns(_assSigns_);

        setAfter(_after_);

    }

    @Override
    public Object clone()
    {
        return new AExprsignsAssCond(
            cloneNode(this._before_),
            cloneNode(this._assSigns_),
            cloneNode(this._after_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprsignsAssCond(this);
    }

    public PAllExpr getBefore()
    {
        return this._before_;
    }

    public void setBefore(PAllExpr node)
    {
        if(this._before_ != null)
        {
            this._before_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._before_ = node;
    }

    public PAssSigns getAssSigns()
    {
        return this._assSigns_;
    }

    public void setAssSigns(PAssSigns node)
    {
        if(this._assSigns_ != null)
        {
            this._assSigns_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assSigns_ = node;
    }

    public PAllExpr getAfter()
    {
        return this._after_;
    }

    public void setAfter(PAllExpr node)
    {
        if(this._after_ != null)
        {
            this._after_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._after_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._before_)
            + toString(this._assSigns_)
            + toString(this._after_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._before_ == child)
        {
            this._before_ = null;
            return;
        }

        if(this._assSigns_ == child)
        {
            this._assSigns_ = null;
            return;
        }

        if(this._after_ == child)
        {
            this._after_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._before_ == oldChild)
        {
            setBefore((PAllExpr) newChild);
            return;
        }

        if(this._assSigns_ == oldChild)
        {
            setAssSigns((PAssSigns) newChild);
            return;
        }

        if(this._after_ == oldChild)
        {
            setAfter((PAllExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
