/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AWithHeaderHelperBiggerHeader */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AWithoutHeaderHelperBiggerHeader */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce AHeaderHelper */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AAheaderhelperbigger1HeaderHelperBigger */
		    {
			ArrayList list = new6();
			push(goTo(4), list);
		    }
		    break;
                    case 7: /* reduce AAheaderhelperbigger2HeaderHelperBigger */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AHeaderHelper2 */
		    {
			ArrayList list = new8();
			push(goTo(5), list);
		    }
		    break;
                    case 9: /* reduce AAwithreffpardef1$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
		    {
			ArrayList list = new9();
			push(goTo(6), list);
		    }
		    break;
                    case 10: /* reduce AAwithreffpardef1$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new10();
			push(goTo(6), list);
		    }
		    break;
                    case 11: /* reduce AAwithreffpardef1$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce AAwithreffpardef1$DtWithoutHelper1FparDef */
		    {
			ArrayList list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce AAwithreffpardef1$Arr1FparDef */
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;
                    case 14: /* reduce AAwithreffpardef2$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;
                    case 15: /* reduce AAwithreffpardef2$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;
                    case 16: /* reduce AAwithreffpardef2$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;
                    case 17: /* reduce AAwithreffpardef2$DtWithoutHelper1FparDef */
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;
                    case 18: /* reduce AAwithreffpardef2$Arr1FparDef */
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;
                    case 19: /* reduce AAnoreffpardef1$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;
                    case 20: /* reduce AAnoreffpardef1$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new20();
			push(goTo(6), list);
		    }
		    break;
                    case 21: /* reduce AAnoreffpardef1$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;
                    case 22: /* reduce AAnoreffpardef1$DtWithoutHelper1FparDef */
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;
                    case 23: /* reduce AAnoreffpardef1$Arr1FparDef */
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;
                    case 24: /* reduce AAnoreffpardef2$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;
                    case 25: /* reduce AAnoreffpardef2$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;
                    case 26: /* reduce AAnoreffpardef2$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;
                    case 27: /* reduce AAnoreffpardef2$DtWithoutHelper1FparDef */
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;
                    case 28: /* reduce AAnoreffpardef2$Arr1FparDef */
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;
                    case 29: /* reduce AIntDataType */
		    {
			ArrayList list = new29();
			push(goTo(7), list);
		    }
		    break;
                    case 30: /* reduce ACharDataType */
		    {
			ArrayList list = new30();
			push(goTo(7), list);
		    }
		    break;
                    case 31: /* reduce AAdttype1Type */
		    {
			ArrayList list = new31();
			push(goTo(8), list);
		    }
		    break;
                    case 32: /* reduce AAdttype2Type */
		    {
			ArrayList list = new32();
			push(goTo(8), list);
		    }
		    break;
                    case 33: /* reduce AArType */
		    {
			ArrayList list = new33();
			push(goTo(8), list);
		    }
		    break;
                    case 34: /* reduce ATypeHelper */
		    {
			ArrayList list = new34();
			push(goTo(9), list);
		    }
		    break;
                    case 35: /* reduce ADtRetType */
		    {
			ArrayList list = new35();
			push(goTo(10), list);
		    }
		    break;
                    case 36: /* reduce ANothingRetType */
		    {
			ArrayList list = new36();
			push(goTo(10), list);
		    }
		    break;
                    case 37: /* reduce ABrs */
		    {
			ArrayList list = new37();
			push(goTo(11), list);
		    }
		    break;
                    case 38: /* reduce AFparTypeHelper */
		    {
			ArrayList list = new38();
			push(goTo(12), list);
		    }
		    break;
                    case 39: /* reduce AFuncDefLocalDef */
		    {
			ArrayList list = new39();
			push(goTo(13), list);
		    }
		    break;
                    case 40: /* reduce AFuncDeclLocalDef */
		    {
			ArrayList list = new40();
			push(goTo(13), list);
		    }
		    break;
                    case 41: /* reduce AVarDefLocalDef */
		    {
			ArrayList list = new41();
			push(goTo(13), list);
		    }
		    break;
                    case 42: /* reduce AAvardef1VarDef */
		    {
			ArrayList list = new42();
			push(goTo(14), list);
		    }
		    break;
                    case 43: /* reduce AAvardef2VarDef */
		    {
			ArrayList list = new43();
			push(goTo(14), list);
		    }
		    break;
                    case 44: /* reduce AVarDefHelper */
		    {
			ArrayList list = new44();
			push(goTo(15), list);
		    }
		    break;
                    case 45: /* reduce AColonId */
		    {
			ArrayList list = new45();
			push(goTo(16), list);
		    }
		    break;
                    case 46: /* reduce AFuncDecl */
		    {
			ArrayList list = new46();
			push(goTo(17), list);
		    }
		    break;
                    case 47: /* reduce ASemicolonStmt */
		    {
			ArrayList list = new47();
			push(goTo(18), list);
		    }
		    break;
                    case 48: /* reduce AExpression$Exprcalc1Stmt */
		    {
			ArrayList list = new48();
			push(goTo(18), list);
		    }
		    break;
                    case 49: /* reduce AExpression$Gen$Parexpr11Stmt */
		    {
			ArrayList list = new49();
			push(goTo(18), list);
		    }
		    break;
                    case 50: /* reduce ABlockStmt */
		    {
			ArrayList list = new50();
			push(goTo(18), list);
		    }
		    break;
                    case 51: /* reduce AFuncallStmt */
		    {
			ArrayList list = new51();
			push(goTo(18), list);
		    }
		    break;
                    case 52: /* reduce AIfStmt */
		    {
			ArrayList list = new52();
			push(goTo(18), list);
		    }
		    break;
                    case 53: /* reduce AWhileStmt */
		    {
			ArrayList list = new53();
			push(goTo(18), list);
		    }
		    break;
                    case 54: /* reduce AReturnExpr$Exprcalc1Stmt */
		    {
			ArrayList list = new54();
			push(goTo(18), list);
		    }
		    break;
                    case 55: /* reduce AReturnExpr$Gen$Parexpr11Stmt */
		    {
			ArrayList list = new55();
			push(goTo(18), list);
		    }
		    break;
                    case 56: /* reduce AReturnStmt */
		    {
			ArrayList list = new56();
			push(goTo(18), list);
		    }
		    break;
                    case 57: /* reduce ANoElseIfStmt */
		    {
			ArrayList list = new57();
			push(goTo(19), list);
		    }
		    break;
                    case 58: /* reduce AWithElseIfStmt */
		    {
			ArrayList list = new58();
			push(goTo(19), list);
		    }
		    break;
                    case 59: /* reduce ASemicolonStmtWithElse */
		    {
			ArrayList list = new59();
			push(goTo(20), list);
		    }
		    break;
                    case 60: /* reduce AExpression$Exprcalc1StmtWithElse */
		    {
			ArrayList list = new60();
			push(goTo(20), list);
		    }
		    break;
                    case 61: /* reduce AExpression$Gen$Parexpr11StmtWithElse */
		    {
			ArrayList list = new61();
			push(goTo(20), list);
		    }
		    break;
                    case 62: /* reduce ABlockStmtWithElse */
		    {
			ArrayList list = new62();
			push(goTo(20), list);
		    }
		    break;
                    case 63: /* reduce AFuncallStmtWithElse */
		    {
			ArrayList list = new63();
			push(goTo(20), list);
		    }
		    break;
                    case 64: /* reduce AIfElseStmtWithElse */
		    {
			ArrayList list = new64();
			push(goTo(20), list);
		    }
		    break;
                    case 65: /* reduce AWhileStmtWithElse */
		    {
			ArrayList list = new65();
			push(goTo(20), list);
		    }
		    break;
                    case 66: /* reduce AReturnExpr$Exprcalc1StmtWithElse */
		    {
			ArrayList list = new66();
			push(goTo(20), list);
		    }
		    break;
                    case 67: /* reduce AReturnExpr$Gen$Parexpr11StmtWithElse */
		    {
			ArrayList list = new67();
			push(goTo(20), list);
		    }
		    break;
                    case 68: /* reduce AReturnStmtWithElse */
		    {
			ArrayList list = new68();
			push(goTo(20), list);
		    }
		    break;
                    case 69: /* reduce AIfElseStmt */
		    {
			ArrayList list = new69();
			push(goTo(21), list);
		    }
		    break;
                    case 70: /* reduce ASemicolonId */
		    {
			ArrayList list = new70();
			push(goTo(22), list);
		    }
		    break;
                    case 71: /* reduce ADoId */
		    {
			ArrayList list = new71();
			push(goTo(23), list);
		    }
		    break;
                    case 72: /* reduce AThenId */
		    {
			ArrayList list = new72();
			push(goTo(24), list);
		    }
		    break;
                    case 73: /* reduce AElseId */
		    {
			ArrayList list = new73();
			push(goTo(25), list);
		    }
		    break;
                    case 74: /* reduce AAssignId */
		    {
			ArrayList list = new74();
			push(goTo(26), list);
		    }
		    break;
                    case 75: /* reduce AAblockblock1Block */
		    {
			ArrayList list = new75();
			push(goTo(27), list);
		    }
		    break;
                    case 76: /* reduce AAblockblock2Block */
		    {
			ArrayList list = new76();
			push(goTo(27), list);
		    }
		    break;
                    case 77: /* reduce AWithParFuncCall */
		    {
			ArrayList list = new77();
			push(goTo(28), list);
		    }
		    break;
                    case 78: /* reduce AWithoutParFuncCall */
		    {
			ArrayList list = new78();
			push(goTo(28), list);
		    }
		    break;
                    case 79: /* reduce AAparametersparameters1$Exprcalc1Parameters */
		    {
			ArrayList list = new79();
			push(goTo(29), list);
		    }
		    break;
                    case 80: /* reduce AAparametersparameters1$Gen$Parexpr11Parameters */
		    {
			ArrayList list = new80();
			push(goTo(29), list);
		    }
		    break;
                    case 81: /* reduce AAparametersparameters2$Exprcalc1Parameters */
		    {
			ArrayList list = new81();
			push(goTo(29), list);
		    }
		    break;
                    case 82: /* reduce AAparametersparameters2$Gen$Parexpr11Parameters */
		    {
			ArrayList list = new82();
			push(goTo(29), list);
		    }
		    break;
                    case 83: /* reduce AParameter$Exprcalc1Parameter */
		    {
			ArrayList list = new83();
			push(goTo(30), list);
		    }
		    break;
                    case 84: /* reduce AParameter$Gen$Parexpr11Parameter */
		    {
			ArrayList list = new84();
			push(goTo(30), list);
		    }
		    break;
                    case 85: /* reduce AVarLValue */
		    {
			ArrayList list = new85();
			push(goTo(31), list);
		    }
		    break;
                    case 86: /* reduce AConstantStringLValue */
		    {
			ArrayList list = new86();
			push(goTo(31), list);
		    }
		    break;
                    case 87: /* reduce ALValue$Exprcalc1LValue */
		    {
			ArrayList list = new87();
			push(goTo(31), list);
		    }
		    break;
                    case 88: /* reduce ALValue$Gen$Parexpr11LValue */
		    {
			ArrayList list = new88();
			push(goTo(31), list);
		    }
		    break;
                    case 89: /* reduce ALbrId */
		    {
			ArrayList list = new89();
			push(goTo(32), list);
		    }
		    break;
                    case 90: /* reduce ARbrId */
		    {
			ArrayList list = new90();
			push(goTo(33), list);
		    }
		    break;
                    case 91: /* reduce ATermExprCalc */
		    {
			ArrayList list = new91();
			push(goTo(34), list);
		    }
		    break;
                    case 92: /* reduce AAddSubExprCalc */
		    {
			ArrayList list = new92();
			push(goTo(34), list);
		    }
		    break;
                    case 93: /* reduce AFactorTerm */
		    {
			ArrayList list = new93();
			push(goTo(35), list);
		    }
		    break;
                    case 94: /* reduce ARestSignsTerm */
		    {
			ArrayList list = new94();
			push(goTo(35), list);
		    }
		    break;
                    case 95: /* reduce ANumberFactor */
		    {
			ArrayList list = new95();
			push(goTo(36), list);
		    }
		    break;
                    case 96: /* reduce ALetterFactor */
		    {
			ArrayList list = new96();
			push(goTo(36), list);
		    }
		    break;
                    case 97: /* reduce ALValueFactor */
		    {
			ArrayList list = new97();
			push(goTo(36), list);
		    }
		    break;
                    case 98: /* reduce AExprCalcFactor */
		    {
			ArrayList list = new98();
			push(goTo(36), list);
		    }
		    break;
                    case 99: /* reduce AFunFactor */
		    {
			ArrayList list = new99();
			push(goTo(36), list);
		    }
		    break;
                    case 100: /* reduce AWithPlminExprSigns */
		    {
			ArrayList list = new100();
			push(goTo(37), list);
		    }
		    break;
                    case 101: /* reduce AWithoutPlminExprSigns */
		    {
			ArrayList list = new101();
			push(goTo(37), list);
		    }
		    break;
                    case 102: /* reduce AParexpr$Parexpr1ParenthesesExpr */
		    {
			ArrayList list = new102();
			push(goTo(38), list);
		    }
		    break;
                    case 103: /* reduce APlusPlusMinus */
		    {
			ArrayList list = new103();
			push(goTo(39), list);
		    }
		    break;
                    case 104: /* reduce AMinusPlusMinus */
		    {
			ArrayList list = new104();
			push(goTo(39), list);
		    }
		    break;
                    case 105: /* reduce APlusPlusMinus2 */
		    {
			ArrayList list = new105();
			push(goTo(40), list);
		    }
		    break;
                    case 106: /* reduce AMinusPlusMinus2 */
		    {
			ArrayList list = new106();
			push(goTo(40), list);
		    }
		    break;
                    case 107: /* reduce AMultRestSigns */
		    {
			ArrayList list = new107();
			push(goTo(41), list);
		    }
		    break;
                    case 108: /* reduce ADivRestSigns */
		    {
			ArrayList list = new108();
			push(goTo(41), list);
		    }
		    break;
                    case 109: /* reduce ADiv1RestSigns */
		    {
			ArrayList list = new109();
			push(goTo(41), list);
		    }
		    break;
                    case 110: /* reduce AModRestSigns */
		    {
			ArrayList list = new110();
			push(goTo(41), list);
		    }
		    break;
                    case 111: /* reduce ACondInParCond */
		    {
			ArrayList list = new111();
			push(goTo(42), list);
		    }
		    break;
                    case 112: /* reduce ACondExpCond */
		    {
			ArrayList list = new112();
			push(goTo(42), list);
		    }
		    break;
                    case 113: /* reduce AExprsigns$Exprcalc1$Exprcalc2AssCond */
		    {
			ArrayList list = new113();
			push(goTo(43), list);
		    }
		    break;
                    case 114: /* reduce AExprsigns$Exprcalc1$Gen$Parexpr12AssCond */
		    {
			ArrayList list = new114();
			push(goTo(43), list);
		    }
		    break;
                    case 115: /* reduce AExprsigns$Gen$Parexpr11$Exprcalc2AssCond */
		    {
			ArrayList list = new115();
			push(goTo(43), list);
		    }
		    break;
                    case 116: /* reduce AExprsigns$Gen$Parexpr11$Gen$Parexpr12AssCond */
		    {
			ArrayList list = new116();
			push(goTo(43), list);
		    }
		    break;
                    case 117: /* reduce ACondparCondInPar */
		    {
			ArrayList list = new117();
			push(goTo(44), list);
		    }
		    break;
                    case 118: /* reduce AEqualAssSigns */
		    {
			ArrayList list = new118();
			push(goTo(45), list);
		    }
		    break;
                    case 119: /* reduce ANeAssSigns */
		    {
			ArrayList list = new119();
			push(goTo(45), list);
		    }
		    break;
                    case 120: /* reduce ASmallAssSigns */
		    {
			ArrayList list = new120();
			push(goTo(45), list);
		    }
		    break;
                    case 121: /* reduce AGreatAssSigns */
		    {
			ArrayList list = new121();
			push(goTo(45), list);
		    }
		    break;
                    case 122: /* reduce ASmalleAssSigns */
		    {
			ArrayList list = new122();
			push(goTo(45), list);
		    }
		    break;
                    case 123: /* reduce AGreateAssSigns */
		    {
			ArrayList list = new123();
			push(goTo(45), list);
		    }
		    break;
                    case 124: /* reduce ATermCond2CondExpr */
		    {
			ArrayList list = new124();
			push(goTo(46), list);
		    }
		    break;
                    case 125: /* reduce AOrCondExpr */
		    {
			ArrayList list = new125();
			push(goTo(46), list);
		    }
		    break;
                    case 126: /* reduce ATermCond1TermCond2 */
		    {
			ArrayList list = new126();
			push(goTo(47), list);
		    }
		    break;
                    case 127: /* reduce AAndTermCond2 */
		    {
			ArrayList list = new127();
			push(goTo(47), list);
		    }
		    break;
                    case 128: /* reduce AFactorCTermCond1 */
		    {
			ArrayList list = new128();
			push(goTo(48), list);
		    }
		    break;
                    case 129: /* reduce ANotTermCond1 */
		    {
			ArrayList list = new129();
			push(goTo(48), list);
		    }
		    break;
                    case 130: /* reduce ALogicalAnd */
		    {
			ArrayList list = new130();
			push(goTo(49), list);
		    }
		    break;
                    case 131: /* reduce ALogicalOr */
		    {
			ArrayList list = new131();
			push(goTo(50), list);
		    }
		    break;
                    case 132: /* reduce ALogicalNot */
		    {
			ArrayList list = new132();
			push(goTo(51), list);
		    }
		    break;
                    case 133: /* reduce AAsCondFactorCond */
		    {
			ArrayList list = new133();
			push(goTo(52), list);
		    }
		    break;
                    case 134: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new134();
			push(goTo(53), list);
		    }
		    break;
                    case 135: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new135();
			push(goTo(53), list);
		    }
		    break;
                    case 136: /* reduce ATerminal$HeaderHelper */
		    {
			ArrayList list = new136();
			push(goTo(54), list);
		    }
		    break;
                    case 137: /* reduce ANonTerminal$HeaderHelper */
		    {
			ArrayList list = new137();
			push(goTo(54), list);
		    }
		    break;
                    case 138: /* reduce ATerminal$VarDefHelper */
		    {
			ArrayList list = new138();
			push(goTo(55), list);
		    }
		    break;
                    case 139: /* reduce ANonTerminal$VarDefHelper */
		    {
			ArrayList list = new139();
			push(goTo(55), list);
		    }
		    break;
                    case 140: /* reduce ATerminal$TypeHelper */
		    {
			ArrayList list = new140();
			push(goTo(56), list);
		    }
		    break;
                    case 141: /* reduce ANonTerminal$TypeHelper */
		    {
			ArrayList list = new141();
			push(goTo(56), list);
		    }
		    break;
                    case 142: /* reduce ATerminal$FparTypeHelper */
		    {
			ArrayList list = new142();
			push(goTo(57), list);
		    }
		    break;
                    case 143: /* reduce ANonTerminal$FparTypeHelper */
		    {
			ArrayList list = new143();
			push(goTo(57), list);
		    }
		    break;
                    case 144: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new144();
			push(goTo(58), list);
		    }
		    break;
                    case 145: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new145();
			push(goTo(58), list);
		    }
		    break;
                    case 146: /* reduce ATerminal$Parameter */
		    {
			ArrayList list = new146();
			push(goTo(59), list);
		    }
		    break;
                    case 147: /* reduce ANonTerminal$Parameter */
		    {
			ArrayList list = new147();
			push(goTo(59), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AWithHeaderHelperBiggerHeader */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TVarName tvarnameNode3;
        TLPar tlparNode4;
        PHeaderHelperBigger pheaderhelperbiggerNode5;
        PHeaderHelper2 pheaderhelper2Node6;
        PRetType prettypeNode7;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pheaderhelperbiggerNode5 = (PHeaderHelperBigger)nodeArrayList4.get(0);
        pheaderhelper2Node6 = (PHeaderHelper2)nodeArrayList5.get(0);
        prettypeNode7 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AWithHeaderHelperBiggerHeader(tfunNode2, tvarnameNode3, tlparNode4, pheaderhelperbiggerNode5, pheaderhelper2Node6, prettypeNode7);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AWithoutHeaderHelperBiggerHeader */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TVarName tvarnameNode3;
        TLPar tlparNode4;
        PHeaderHelper2 pheaderhelper2Node5;
        PRetType prettypeNode6;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pheaderhelper2Node5 = (PHeaderHelper2)nodeArrayList4.get(0);
        prettypeNode6 = (PRetType)nodeArrayList5.get(0);

        pheaderNode1 = new AWithoutHeaderHelperBiggerHeader(tfunNode2, tvarnameNode3, tlparNode4, pheaderhelper2Node5, prettypeNode6);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AHeaderHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderHelper pheaderhelperNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PFparDef pfpardefNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList2.get(0);

        pheaderhelperNode1 = new AHeaderHelper(tsemicolonNode2, pfpardefNode3);
        }
	nodeList.add(pheaderhelperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAheaderhelperbigger1HeaderHelperBigger */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderHelperBigger pheaderhelperbiggerNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode3 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        }

        pheaderhelperbiggerNode1 = new AHeaderHelperBigger(pfpardefNode2, listNode3);
        }
	nodeList.add(pheaderhelperbiggerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAheaderhelperbigger2HeaderHelperBigger */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderHelperBigger pheaderhelperbiggerNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode4 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pheaderhelperbiggerNode1 = new AHeaderHelperBigger(pfpardefNode2, listNode4);
        }
	nodeList.add(pheaderhelperbiggerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AHeaderHelper2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderHelper2 pheaderhelper2Node1;
        {
            // Block
        TRPar trparNode2;
        TColon tcolonNode3;
        trparNode2 = (TRPar)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);

        pheaderhelper2Node1 = new AHeaderHelper2(trparNode2, tcolonNode3);
        }
	nodeList.add(pheaderhelper2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAwithreffpardef1$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        PFparTypeHelper2 pfpartypehelper2Node8;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);
        {
            // Block
        PBrs pbrsNode9;
        LinkedList listNode10 = new LinkedList();
        pbrsNode9 = (PBrs)nodeArrayList5.get(0);
        {
            // Block
        }

        pfpartypehelper2Node8 = new AWithBrsFparTypeHelper2(pbrsNode9, listNode10);
        }

        pfpartypeNode6 = new ADtWithHelperFparType(pdatatypeNode7, pfpartypehelper2Node8);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAwithreffpardef1$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        PFparTypeHelper2 pfpartypehelper2Node8;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);
        {
            // Block
        PBrs pbrsNode9;
        LinkedList listNode11 = new LinkedList();
        pbrsNode9 = (PBrs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pfpartypehelper2Node8 = new AWithBrsFparTypeHelper2(pbrsNode9, listNode11);
        }

        pfpartypeNode6 = new ADtWithHelperFparType(pdatatypeNode7, pfpartypehelper2Node8);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAwithreffpardef1$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        PFparTypeHelper2 pfpartypehelper2Node8;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pfpartypehelper2Node8 = new AWithoutBrsFparTypeHelper2(listNode10);
        }

        pfpartypeNode6 = new ADtWithHelperFparType(pdatatypeNode7, pfpartypehelper2Node8);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAwithreffpardef1$DtWithoutHelper1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);

        pfpartypeNode6 = new ADtWithoutHelperFparType(pdatatypeNode7);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAwithreffpardef1$Arr1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        TArray tarrayNode7;
        tarrayNode7 = (TArray)nodeArrayList4.get(0);

        pfpartypeNode6 = new AArrFparType(tarrayNode7);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAwithreffpardef2$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode5 = new LinkedList();
        PColonId pcolonidNode6;
        PFparType pfpartypeNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcolonidNode6 = (PColonId)nodeArrayList4.get(0);
        {
            // Block
        PDataType pdatatypeNode8;
        PFparTypeHelper2 pfpartypehelper2Node9;
        pdatatypeNode8 = (PDataType)nodeArrayList5.get(0);
        {
            // Block
        PBrs pbrsNode10;
        LinkedList listNode11 = new LinkedList();
        pbrsNode10 = (PBrs)nodeArrayList6.get(0);
        {
            // Block
        }

        pfpartypehelper2Node9 = new AWithBrsFparTypeHelper2(pbrsNode10, listNode11);
        }

        pfpartypeNode7 = new ADtWithHelperFparType(pdatatypeNode8, pfpartypehelper2Node9);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode5, pcolonidNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAwithreffpardef2$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode5 = new LinkedList();
        PColonId pcolonidNode6;
        PFparType pfpartypeNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcolonidNode6 = (PColonId)nodeArrayList4.get(0);
        {
            // Block
        PDataType pdatatypeNode8;
        PFparTypeHelper2 pfpartypehelper2Node9;
        pdatatypeNode8 = (PDataType)nodeArrayList5.get(0);
        {
            // Block
        PBrs pbrsNode10;
        LinkedList listNode12 = new LinkedList();
        pbrsNode10 = (PBrs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList7.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }

        pfpartypehelper2Node9 = new AWithBrsFparTypeHelper2(pbrsNode10, listNode12);
        }

        pfpartypeNode7 = new ADtWithHelperFparType(pdatatypeNode8, pfpartypehelper2Node9);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode5, pcolonidNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAwithreffpardef2$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode5 = new LinkedList();
        PColonId pcolonidNode6;
        PFparType pfpartypeNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcolonidNode6 = (PColonId)nodeArrayList4.get(0);
        {
            // Block
        PDataType pdatatypeNode8;
        PFparTypeHelper2 pfpartypehelper2Node9;
        pdatatypeNode8 = (PDataType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pfpartypehelper2Node9 = new AWithoutBrsFparTypeHelper2(listNode11);
        }

        pfpartypeNode7 = new ADtWithHelperFparType(pdatatypeNode8, pfpartypehelper2Node9);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode5, pcolonidNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAwithreffpardef2$DtWithoutHelper1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode5 = new LinkedList();
        PColonId pcolonidNode6;
        PFparType pfpartypeNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcolonidNode6 = (PColonId)nodeArrayList4.get(0);
        {
            // Block
        PDataType pdatatypeNode8;
        pdatatypeNode8 = (PDataType)nodeArrayList5.get(0);

        pfpartypeNode7 = new ADtWithoutHelperFparType(pdatatypeNode8);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode5, pcolonidNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAwithreffpardef2$Arr1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TVarName tvarnameNode3;
        LinkedList listNode5 = new LinkedList();
        PColonId pcolonidNode6;
        PFparType pfpartypeNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcolonidNode6 = (PColonId)nodeArrayList4.get(0);
        {
            // Block
        TArray tarrayNode8;
        tarrayNode8 = (TArray)nodeArrayList5.get(0);

        pfpartypeNode7 = new AArrFparType(tarrayNode8);
        }

        pfpardefNode1 = new AWithRefFparDef(trefNode2, tvarnameNode3, listNode5, pcolonidNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAnoreffpardef1$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode3 = new LinkedList();
        PColonId pcolonidNode4;
        PFparType pfpartypeNode5;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        }
        pcolonidNode4 = (PColonId)nodeArrayList2.get(0);
        {
            // Block
        PDataType pdatatypeNode6;
        PFparTypeHelper2 pfpartypehelper2Node7;
        pdatatypeNode6 = (PDataType)nodeArrayList3.get(0);
        {
            // Block
        PBrs pbrsNode8;
        LinkedList listNode9 = new LinkedList();
        pbrsNode8 = (PBrs)nodeArrayList4.get(0);
        {
            // Block
        }

        pfpartypehelper2Node7 = new AWithBrsFparTypeHelper2(pbrsNode8, listNode9);
        }

        pfpartypeNode5 = new ADtWithHelperFparType(pdatatypeNode6, pfpartypehelper2Node7);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode3, pcolonidNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAnoreffpardef1$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode3 = new LinkedList();
        PColonId pcolonidNode4;
        PFparType pfpartypeNode5;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        }
        pcolonidNode4 = (PColonId)nodeArrayList2.get(0);
        {
            // Block
        PDataType pdatatypeNode6;
        PFparTypeHelper2 pfpartypehelper2Node7;
        pdatatypeNode6 = (PDataType)nodeArrayList3.get(0);
        {
            // Block
        PBrs pbrsNode8;
        LinkedList listNode10 = new LinkedList();
        pbrsNode8 = (PBrs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pfpartypehelper2Node7 = new AWithBrsFparTypeHelper2(pbrsNode8, listNode10);
        }

        pfpartypeNode5 = new ADtWithHelperFparType(pdatatypeNode6, pfpartypehelper2Node7);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode3, pcolonidNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAnoreffpardef1$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode3 = new LinkedList();
        PColonId pcolonidNode4;
        PFparType pfpartypeNode5;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        }
        pcolonidNode4 = (PColonId)nodeArrayList2.get(0);
        {
            // Block
        PDataType pdatatypeNode6;
        PFparTypeHelper2 pfpartypehelper2Node7;
        pdatatypeNode6 = (PDataType)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList4.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pfpartypehelper2Node7 = new AWithoutBrsFparTypeHelper2(listNode9);
        }

        pfpartypeNode5 = new ADtWithHelperFparType(pdatatypeNode6, pfpartypehelper2Node7);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode3, pcolonidNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAnoreffpardef1$DtWithoutHelper1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode3 = new LinkedList();
        PColonId pcolonidNode4;
        PFparType pfpartypeNode5;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        }
        pcolonidNode4 = (PColonId)nodeArrayList2.get(0);
        {
            // Block
        PDataType pdatatypeNode6;
        pdatatypeNode6 = (PDataType)nodeArrayList3.get(0);

        pfpartypeNode5 = new ADtWithoutHelperFparType(pdatatypeNode6);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode3, pcolonidNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAnoreffpardef1$Arr1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode3 = new LinkedList();
        PColonId pcolonidNode4;
        PFparType pfpartypeNode5;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        }
        pcolonidNode4 = (PColonId)nodeArrayList2.get(0);
        {
            // Block
        TArray tarrayNode6;
        tarrayNode6 = (TArray)nodeArrayList3.get(0);

        pfpartypeNode5 = new AArrFparType(tarrayNode6);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode3, pcolonidNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAnoreffpardef2$DtWithHelper1$Awithbrsfpartypehelper211FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        PFparTypeHelper2 pfpartypehelper2Node8;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);
        {
            // Block
        PBrs pbrsNode9;
        LinkedList listNode10 = new LinkedList();
        pbrsNode9 = (PBrs)nodeArrayList5.get(0);
        {
            // Block
        }

        pfpartypehelper2Node8 = new AWithBrsFparTypeHelper2(pbrsNode9, listNode10);
        }

        pfpartypeNode6 = new ADtWithHelperFparType(pdatatypeNode7, pfpartypehelper2Node8);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAnoreffpardef2$DtWithHelper1$Awithbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        PFparTypeHelper2 pfpartypehelper2Node8;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);
        {
            // Block
        PBrs pbrsNode9;
        LinkedList listNode11 = new LinkedList();
        pbrsNode9 = (PBrs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pfpartypehelper2Node8 = new AWithBrsFparTypeHelper2(pbrsNode9, listNode11);
        }

        pfpartypeNode6 = new ADtWithHelperFparType(pdatatypeNode7, pfpartypehelper2Node8);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAnoreffpardef2$DtWithHelper1$Awithoutbrsfpartypehelper221FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        PFparTypeHelper2 pfpartypehelper2Node8;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pfpartypehelper2Node8 = new AWithoutBrsFparTypeHelper2(listNode10);
        }

        pfpartypeNode6 = new ADtWithHelperFparType(pdatatypeNode7, pfpartypehelper2Node8);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAnoreffpardef2$DtWithoutHelper1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        PDataType pdatatypeNode7;
        pdatatypeNode7 = (PDataType)nodeArrayList4.get(0);

        pfpartypeNode6 = new ADtWithoutHelperFparType(pdatatypeNode7);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAnoreffpardef2$Arr1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TVarName tvarnameNode2;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PFparType pfpartypeNode6;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        {
            // Block
        TArray tarrayNode7;
        tarrayNode7 = (TArray)nodeArrayList4.get(0);

        pfpartypeNode6 = new AArrFparType(tarrayNode7);
        }

        pfpardefNode1 = new ANoRefFparDef(tvarnameNode2, listNode4, pcolonidNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAdttype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode3 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new ADtType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAdttype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new ADtType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AArType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TArray tarrayNode2;
        tarrayNode2 = (TArray)nodeArrayList1.get(0);

        ptypeNode1 = new AArType(tarrayNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATypeHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeHelper ptypehelperNode1;
        {
            // Block
        TLBr tlbrNode2;
        TConstant tconstantNode3;
        TRBr trbrNode4;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        tconstantNode3 = (TConstant)nodeArrayList2.get(0);
        trbrNode4 = (TRBr)nodeArrayList3.get(0);

        ptypehelperNode1 = new ATypeHelper(tlbrNode2, tconstantNode3, trbrNode4);
        }
	nodeList.add(ptypehelperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ADtRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADtRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ABrs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBrs pbrsNode1;
        {
            // Block
        TLBr tlbrNode2;
        TRBr trbrNode3;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        trbrNode3 = (TRBr)nodeArrayList2.get(0);

        pbrsNode1 = new ABrs(tlbrNode2, trbrNode3);
        }
	nodeList.add(pbrsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AFparTypeHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparTypeHelper pfpartypehelperNode1;
        {
            // Block
        TLBr tlbrNode2;
        TConstant tconstantNode3;
        TRBr trbrNode4;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        tconstantNode3 = (TConstant)nodeArrayList2.get(0);
        trbrNode4 = (TRBr)nodeArrayList3.get(0);

        pfpartypehelperNode1 = new AFparTypeHelper(tlbrNode2, tconstantNode3, trbrNode4);
        }
	nodeList.add(pfpartypehelperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AFuncDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AFuncDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AVarDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarDefLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAvardef1VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TVar tvarNode2;
        TVarName tvarnameNode3;
        LinkedList listNode4 = new LinkedList();
        PColonId pcolonidNode5;
        PType ptypeNode6;
        TSemicolon tsemicolonNode7;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        }
        pcolonidNode5 = (PColonId)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef(tvarNode2, tvarnameNode3, listNode4, pcolonidNode5, ptypeNode6, tsemicolonNode7);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAvardef2VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TVar tvarNode2;
        TVarName tvarnameNode3;
        LinkedList listNode5 = new LinkedList();
        PColonId pcolonidNode6;
        PType ptypeNode7;
        TSemicolon tsemicolonNode8;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcolonidNode6 = (PColonId)nodeArrayList4.get(0);
        ptypeNode7 = (PType)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pvardefNode1 = new AVarDef(tvarNode2, tvarnameNode3, listNode5, pcolonidNode6, ptypeNode7, tsemicolonNode8);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AVarDefHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDefHelper pvardefhelperNode1;
        {
            // Block
        TComma tcommaNode2;
        TVarName tvarnameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tvarnameNode3 = (TVarName)nodeArrayList2.get(0);

        pvardefhelperNode1 = new AVarDefHelper(tcommaNode2, tvarnameNode3);
        }
	nodeList.add(pvardefhelperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AColonId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PColonId pcolonidNode1;
        {
            // Block
        TColon tcolonNode2;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);

        pcolonidNode1 = new AColonId(tcolonNode2);
        }
	nodeList.add(pcolonidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemicolon tsemicolonNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tsemicolonNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ASemicolonStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmtNode1 = new ASemicolonStmt(tsemicolonNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AExpression$Exprcalc1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLValue plvalueNode2;
        PAssignId passignidNode3;
        PAllExpr pallexprNode4;
        PSemicolonId psemicolonidNode6;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        passignidNode3 = (PAssignId)nodeArrayList2.get(0);
        {
            // Block
        PExprCalc pexprcalcNode5;
        pexprcalcNode5 = (PExprCalc)nodeArrayList3.get(0);

        pallexprNode4 = new AExprcalcAllExpr(pexprcalcNode5);
        }
        psemicolonidNode6 = (PSemicolonId)nodeArrayList4.get(0);

        pstmtNode1 = new AExpressionStmt(plvalueNode2, passignidNode3, pallexprNode4, psemicolonidNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AExpression$Gen$Parexpr11Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLValue plvalueNode2;
        PAssignId passignidNode3;
        PAllExpr pallexprNode4;
        PSemicolonId psemicolonidNode7;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        passignidNode3 = (PAssignId)nodeArrayList2.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode5;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode6;
        pparenthesesexprNode6 = (PParenthesesExpr)nodeArrayList3.get(0);

        pgeneralexprNode5 = new AParexprGeneralExpr(pparenthesesexprNode6);
        }

        pallexprNode4 = new AGenAllExpr(pgeneralexprNode5);
        }
        psemicolonidNode7 = (PSemicolonId)nodeArrayList4.get(0);

        pstmtNode1 = new AExpressionStmt(plvalueNode2, passignidNode3, pallexprNode4, psemicolonidNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtNode1 = new ABlockStmt(pblockNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AFuncallStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        PSemicolonId psemicolonidNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        psemicolonidNode3 = (PSemicolonId)nodeArrayList2.get(0);

        pstmtNode1 = new AFuncallStmt(pfunccallNode2, psemicolonidNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pstmtNode1 = new AIfStmt(pifstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        PDoId pdoidNode4;
        PStmt pstmtNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        pdoidNode4 = (PDoId)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, pcondNode3, pdoidNode4, pstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AReturnExpr$Exprcalc1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PAllExpr pallexprNode3;
        PSemicolonId psemicolonidNode5;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        PExprCalc pexprcalcNode4;
        pexprcalcNode4 = (PExprCalc)nodeArrayList2.get(0);

        pallexprNode3 = new AExprcalcAllExpr(pexprcalcNode4);
        }
        psemicolonidNode5 = (PSemicolonId)nodeArrayList3.get(0);

        pstmtNode1 = new AReturnExprStmt(treturnNode2, pallexprNode3, psemicolonidNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AReturnExpr$Gen$Parexpr11Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PAllExpr pallexprNode3;
        PSemicolonId psemicolonidNode6;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode4;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode5;
        pparenthesesexprNode5 = (PParenthesesExpr)nodeArrayList2.get(0);

        pgeneralexprNode4 = new AParexprGeneralExpr(pparenthesesexprNode5);
        }

        pallexprNode3 = new AGenAllExpr(pgeneralexprNode4);
        }
        psemicolonidNode6 = (PSemicolonId)nodeArrayList3.get(0);

        pstmtNode1 = new AReturnExprStmt(treturnNode2, pallexprNode3, psemicolonidNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmtNode1 = new AReturnStmt(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ANoElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        PThenId pthenidNode4;
        PStmt pstmtNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        pthenidNode4 = (PThenId)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pifstmtNode1 = new ANoElseIfStmt(tifNode2, pcondNode3, pthenidNode4, pstmtNode5);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AWithElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        PThenId pthenidNode4;
        PStmtWithElse pstmtwithelseNode5;
        PElseId pelseidNode6;
        PStmt pstmtNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        pthenidNode4 = (PThenId)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);
        pelseidNode6 = (PElseId)nodeArrayList5.get(0);
        pstmtNode7 = (PStmt)nodeArrayList6.get(0);

        pifstmtNode1 = new AWithElseIfStmt(tifNode2, pcondNode3, pthenidNode4, pstmtwithelseNode5, pelseidNode6, pstmtNode7);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ASemicolonStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ASemicolonStmtWithElse(tsemicolonNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AExpression$Exprcalc1StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PLValue plvalueNode2;
        PAssignId passignidNode3;
        PAllExpr pallexprNode4;
        PSemicolonId psemicolonidNode6;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        passignidNode3 = (PAssignId)nodeArrayList2.get(0);
        {
            // Block
        PExprCalc pexprcalcNode5;
        pexprcalcNode5 = (PExprCalc)nodeArrayList3.get(0);

        pallexprNode4 = new AExprcalcAllExpr(pexprcalcNode5);
        }
        psemicolonidNode6 = (PSemicolonId)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AExpressionStmtWithElse(plvalueNode2, passignidNode3, pallexprNode4, psemicolonidNode6);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AExpression$Gen$Parexpr11StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PLValue plvalueNode2;
        PAssignId passignidNode3;
        PAllExpr pallexprNode4;
        PSemicolonId psemicolonidNode7;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        passignidNode3 = (PAssignId)nodeArrayList2.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode5;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode6;
        pparenthesesexprNode6 = (PParenthesesExpr)nodeArrayList3.get(0);

        pgeneralexprNode5 = new AParexprGeneralExpr(pparenthesesexprNode6);
        }

        pallexprNode4 = new AGenAllExpr(pgeneralexprNode5);
        }
        psemicolonidNode7 = (PSemicolonId)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AExpressionStmtWithElse(plvalueNode2, passignidNode3, pallexprNode4, psemicolonidNode7);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ABlockStmtWithElse(pblockNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AFuncallStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        PSemicolonId psemicolonidNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        psemicolonidNode3 = (PSemicolonId)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AFuncallStmtWithElse(pfunccallNode2, psemicolonidNode3);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AIfElseStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PIfElseStmt pifelsestmtNode2;
        pifelsestmtNode2 = (PIfElseStmt)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new AIfElseStmtWithElse(pifelsestmtNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AWhileStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        PDoId pdoidNode4;
        PStmtWithElse pstmtwithelseNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        pdoidNode4 = (PDoId)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AWhileStmtWithElse(twhileNode2, pcondNode3, pdoidNode4, pstmtwithelseNode5);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AReturnExpr$Exprcalc1StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TReturn treturnNode2;
        PAllExpr pallexprNode3;
        PSemicolonId psemicolonidNode5;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        PExprCalc pexprcalcNode4;
        pexprcalcNode4 = (PExprCalc)nodeArrayList2.get(0);

        pallexprNode3 = new AExprcalcAllExpr(pexprcalcNode4);
        }
        psemicolonidNode5 = (PSemicolonId)nodeArrayList3.get(0);

        pstmtwithelseNode1 = new AReturnExprStmtWithElse(treturnNode2, pallexprNode3, psemicolonidNode5);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AReturnExpr$Gen$Parexpr11StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TReturn treturnNode2;
        PAllExpr pallexprNode3;
        PSemicolonId psemicolonidNode6;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode4;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode5;
        pparenthesesexprNode5 = (PParenthesesExpr)nodeArrayList2.get(0);

        pgeneralexprNode4 = new AParexprGeneralExpr(pparenthesesexprNode5);
        }

        pallexprNode3 = new AGenAllExpr(pgeneralexprNode4);
        }
        psemicolonidNode6 = (PSemicolonId)nodeArrayList3.get(0);

        pstmtwithelseNode1 = new AReturnExprStmtWithElse(treturnNode2, pallexprNode3, psemicolonidNode6);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AReturnStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AReturnStmtWithElse(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AIfElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfElseStmt pifelsestmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        PThenId pthenidNode4;
        PStmtWithElse pstmtwithelseNode5;
        PElseId pelseidNode6;
        PStmtWithElse pstmtwithelseNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        pthenidNode4 = (PThenId)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);
        pelseidNode6 = (PElseId)nodeArrayList5.get(0);
        pstmtwithelseNode7 = (PStmtWithElse)nodeArrayList6.get(0);

        pifelsestmtNode1 = new AIfElseStmt(tifNode2, pcondNode3, pthenidNode4, pstmtwithelseNode5, pelseidNode6, pstmtwithelseNode7);
        }
	nodeList.add(pifelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ASemicolonId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSemicolonId psemicolonidNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        psemicolonidNode1 = new ASemicolonId(tsemicolonNode2);
        }
	nodeList.add(psemicolonidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ADoId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDoId pdoidNode1;
        {
            // Block
        TDo tdoNode2;
        tdoNode2 = (TDo)nodeArrayList1.get(0);

        pdoidNode1 = new ADoId(tdoNode2);
        }
	nodeList.add(pdoidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AThenId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PThenId pthenidNode1;
        {
            // Block
        TThen tthenNode2;
        tthenNode2 = (TThen)nodeArrayList1.get(0);

        pthenidNode1 = new AThenId(tthenNode2);
        }
	nodeList.add(pthenidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AElseId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElseId pelseidNode1;
        {
            // Block
        TElse telseNode2;
        telseNode2 = (TElse)nodeArrayList1.get(0);

        pelseidNode1 = new AElseId(telseNode2);
        }
	nodeList.add(pelseidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AAssignId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignId passignidNode1;
        {
            // Block
        TAssign tassignNode2;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);

        passignidNode1 = new AAssignId(tassignNode2);
        }
	nodeList.add(passignidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAblockblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TCurlyLBr tcurlylbrNode2;
        LinkedList listNode3 = new LinkedList();
        TCurlyRBr tcurlyrbrNode4;
        tcurlylbrNode2 = (TCurlyLBr)nodeArrayList1.get(0);
        {
            // Block
        }
        tcurlyrbrNode4 = (TCurlyRBr)nodeArrayList2.get(0);

        pblockNode1 = new ABlockBlock(tcurlylbrNode2, listNode3, tcurlyrbrNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AAblockblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TCurlyLBr tcurlylbrNode2;
        LinkedList listNode4 = new LinkedList();
        TCurlyRBr tcurlyrbrNode5;
        tcurlylbrNode2 = (TCurlyLBr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcurlyrbrNode5 = (TCurlyRBr)nodeArrayList3.get(0);

        pblockNode1 = new ABlockBlock(tcurlylbrNode2, listNode4, tcurlyrbrNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AWithParFuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TVarName tvarnameNode2;
        TLPar tlparNode3;
        PParameters pparametersNode4;
        TRPar trparNode5;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pparametersNode4 = (PParameters)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunccallNode1 = new AWithParFuncCall(tvarnameNode2, tlparNode3, pparametersNode4, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AWithoutParFuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TVarName tvarnameNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfunccallNode1 = new AWithoutParFuncCall(tvarnameNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AAparametersparameters1$Exprcalc1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExprCalc pexprcalcNode3;
        pexprcalcNode3 = (PExprCalc)nodeArrayList1.get(0);

        pallexprNode2 = new AExprcalcAllExpr(pexprcalcNode3);
        }
        {
            // Block
        }

        pparametersNode1 = new AParametersParameters(pallexprNode2, listNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AAparametersparameters1$Gen$Parexpr11Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PGeneralExpr pgeneralexprNode3;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode4;
        pparenthesesexprNode4 = (PParenthesesExpr)nodeArrayList1.get(0);

        pgeneralexprNode3 = new AParexprGeneralExpr(pparenthesesexprNode4);
        }

        pallexprNode2 = new AGenAllExpr(pgeneralexprNode3);
        }
        {
            // Block
        }

        pparametersNode1 = new AParametersParameters(pallexprNode2, listNode5);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AAparametersparameters2$Exprcalc1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PExprCalc pexprcalcNode3;
        pexprcalcNode3 = (PExprCalc)nodeArrayList1.get(0);

        pallexprNode2 = new AExprcalcAllExpr(pexprcalcNode3);
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pparametersNode1 = new AParametersParameters(pallexprNode2, listNode5);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AAparametersparameters2$Gen$Parexpr11Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        PGeneralExpr pgeneralexprNode3;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode4;
        pparenthesesexprNode4 = (PParenthesesExpr)nodeArrayList1.get(0);

        pgeneralexprNode3 = new AParexprGeneralExpr(pparenthesesexprNode4);
        }

        pallexprNode2 = new AGenAllExpr(pgeneralexprNode3);
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pparametersNode1 = new AParametersParameters(pallexprNode2, listNode6);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AParameter$Exprcalc1Parameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        TComma tcommaNode2;
        PAllExpr pallexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        {
            // Block
        PExprCalc pexprcalcNode4;
        pexprcalcNode4 = (PExprCalc)nodeArrayList2.get(0);

        pallexprNode3 = new AExprcalcAllExpr(pexprcalcNode4);
        }

        pparameterNode1 = new AParameterParameter(tcommaNode2, pallexprNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AParameter$Gen$Parexpr11Parameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        TComma tcommaNode2;
        PAllExpr pallexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode4;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode5;
        pparenthesesexprNode5 = (PParenthesesExpr)nodeArrayList2.get(0);

        pgeneralexprNode4 = new AParexprGeneralExpr(pparenthesesexprNode5);
        }

        pallexprNode3 = new AGenAllExpr(pgeneralexprNode4);
        }

        pparameterNode1 = new AParameterParameter(tcommaNode2, pallexprNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AVarLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TVarName tvarnameNode2;
        tvarnameNode2 = (TVarName)nodeArrayList1.get(0);

        plvalueNode1 = new AVarLValue(tvarnameNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AConstantStringLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TConstantString tconstantstringNode2;
        tconstantstringNode2 = (TConstantString)nodeArrayList1.get(0);

        plvalueNode1 = new AConstantStringLValue(tconstantstringNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ALValue$Exprcalc1LValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        PLbrId plbridNode3;
        PAllExpr pallexprNode4;
        PRbrId prbridNode6;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        plbridNode3 = (PLbrId)nodeArrayList2.get(0);
        {
            // Block
        PExprCalc pexprcalcNode5;
        pexprcalcNode5 = (PExprCalc)nodeArrayList3.get(0);

        pallexprNode4 = new AExprcalcAllExpr(pexprcalcNode5);
        }
        prbridNode6 = (PRbrId)nodeArrayList4.get(0);

        plvalueNode1 = new ALValueLValue(plvalueNode2, plbridNode3, pallexprNode4, prbridNode6);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce ALValue$Gen$Parexpr11LValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        PLbrId plbridNode3;
        PAllExpr pallexprNode4;
        PRbrId prbridNode7;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        plbridNode3 = (PLbrId)nodeArrayList2.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode5;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode6;
        pparenthesesexprNode6 = (PParenthesesExpr)nodeArrayList3.get(0);

        pgeneralexprNode5 = new AParexprGeneralExpr(pparenthesesexprNode6);
        }

        pallexprNode4 = new AGenAllExpr(pgeneralexprNode5);
        }
        prbridNode7 = (PRbrId)nodeArrayList4.get(0);

        plvalueNode1 = new ALValueLValue(plvalueNode2, plbridNode3, pallexprNode4, prbridNode7);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce ALbrId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLbrId plbridNode1;
        {
            // Block
        TLBr tlbrNode2;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);

        plbridNode1 = new ALbrId(tlbrNode2);
        }
	nodeList.add(plbridNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ARbrId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRbrId prbridNode1;
        {
            // Block
        TRBr trbrNode2;
        trbrNode2 = (TRBr)nodeArrayList1.get(0);

        prbridNode1 = new ARbrId(trbrNode2);
        }
	nodeList.add(prbridNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ATermExprCalc */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprCalc pexprcalcNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprcalcNode1 = new ATermExprCalc(ptermNode2);
        }
	nodeList.add(pexprcalcNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AAddSubExprCalc */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprCalc pexprcalcNode1;
        {
            // Block
        PExprCalc pexprcalcNode2;
        PPlusMinus pplusminusNode3;
        PTerm ptermNode4;
        pexprcalcNode2 = (PExprCalc)nodeArrayList1.get(0);
        pplusminusNode3 = (PPlusMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprcalcNode1 = new AAddSubExprCalc(pexprcalcNode2, pplusminusNode3, ptermNode4);
        }
	nodeList.add(pexprcalcNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ARestSignsTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PRestSigns prestsignsNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        prestsignsNode3 = (PRestSigns)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ARestSignsTerm(ptermNode2, prestsignsNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ANumberFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PExprSigns pexprsignsNode2;
        pexprsignsNode2 = (PExprSigns)nodeArrayList1.get(0);

        pfactorNode1 = new ANumberFactor(pexprsignsNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ALetterFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TConstantCharacter tconstantcharacterNode2;
        tconstantcharacterNode2 = (TConstantCharacter)nodeArrayList1.get(0);

        pfactorNode1 = new ALetterFactor(tconstantcharacterNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ALValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        pfactorNode1 = new ALValueFactor(plvalueNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AExprCalcFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLPar tlparNode2;
        PExprCalc pexprcalcNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprcalcNode3 = (PExprCalc)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfactorNode1 = new AExprCalcFactor(tlparNode2, pexprcalcNode3, trparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AFunFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pfactorNode1 = new AFunFactor(pfunccallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce AWithPlminExprSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprSigns pexprsignsNode1;
        {
            // Block
        PPlusMinus2 pplusminus2Node2;
        TConstant tconstantNode3;
        pplusminus2Node2 = (PPlusMinus2)nodeArrayList1.get(0);
        tconstantNode3 = (TConstant)nodeArrayList2.get(0);

        pexprsignsNode1 = new AWithPlminExprSigns(pplusminus2Node2, tconstantNode3);
        }
	nodeList.add(pexprsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce AWithoutPlminExprSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprSigns pexprsignsNode1;
        {
            // Block
        TConstant tconstantNode2;
        tconstantNode2 = (TConstant)nodeArrayList1.get(0);

        pexprsignsNode1 = new AWithoutPlminExprSigns(tconstantNode2);
        }
	nodeList.add(pexprsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AParexpr$Parexpr1ParenthesesExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParenthesesExpr pparenthesesexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PGeneralExpr pgeneralexprNode3;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        {
            // Block
        PParenthesesExpr pparenthesesexprNode4;
        pparenthesesexprNode4 = (PParenthesesExpr)nodeArrayList2.get(0);

        pgeneralexprNode3 = new AParexprGeneralExpr(pparenthesesexprNode4);
        }
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pparenthesesexprNode1 = new AParexprParenthesesExpr(tlparNode2, pgeneralexprNode3, trparNode5);
        }
	nodeList.add(pparenthesesexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce APlusPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinus pplusminusNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pplusminusNode1 = new APlusPlusMinus(tplusNode2);
        }
	nodeList.add(pplusminusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce AMinusPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinus pplusminusNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pplusminusNode1 = new AMinusPlusMinus(tminusNode2);
        }
	nodeList.add(pplusminusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce APlusPlusMinus2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinus2 pplusminus2Node1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pplusminus2Node1 = new APlusPlusMinus2(tplusNode2);
        }
	nodeList.add(pplusminus2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce AMinusPlusMinus2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinus2 pplusminus2Node1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pplusminus2Node1 = new AMinusPlusMinus2(tminusNode2);
        }
	nodeList.add(pplusminus2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce AMultRestSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRestSigns prestsignsNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        prestsignsNode1 = new AMultRestSigns(tmultNode2);
        }
	nodeList.add(prestsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce ADivRestSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRestSigns prestsignsNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        prestsignsNode1 = new ADivRestSigns(tdivNode2);
        }
	nodeList.add(prestsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce ADiv1RestSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRestSigns prestsignsNode1;
        {
            // Block
        TDiv1 tdiv1Node2;
        tdiv1Node2 = (TDiv1)nodeArrayList1.get(0);

        prestsignsNode1 = new ADiv1RestSigns(tdiv1Node2);
        }
	nodeList.add(prestsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce AModRestSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRestSigns prestsignsNode1;
        {
            // Block
        TMod tmodNode2;
        tmodNode2 = (TMod)nodeArrayList1.get(0);

        prestsignsNode1 = new AModRestSigns(tmodNode2);
        }
	nodeList.add(prestsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce ACondInParCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCondInPar pcondinparNode2;
        pcondinparNode2 = (PCondInPar)nodeArrayList1.get(0);

        pcondNode1 = new ACondInParCond(pcondinparNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ACondExpCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCondExpr pcondexprNode2;
        pcondexprNode2 = (PCondExpr)nodeArrayList1.get(0);

        pcondNode1 = new ACondExpCond(pcondexprNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce AExprsigns$Exprcalc1$Exprcalc2AssCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssCond passcondNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        PAssSigns passsignsNode4;
        PAllExpr pallexprNode5;
        {
            // Block
        PExprCalc pexprcalcNode3;
        pexprcalcNode3 = (PExprCalc)nodeArrayList1.get(0);

        pallexprNode2 = new AExprcalcAllExpr(pexprcalcNode3);
        }
        passsignsNode4 = (PAssSigns)nodeArrayList2.get(0);
        {
            // Block
        PExprCalc pexprcalcNode6;
        pexprcalcNode6 = (PExprCalc)nodeArrayList3.get(0);

        pallexprNode5 = new AExprcalcAllExpr(pexprcalcNode6);
        }

        passcondNode1 = new AExprsignsAssCond(pallexprNode2, passsignsNode4, pallexprNode5);
        }
	nodeList.add(passcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce AExprsigns$Exprcalc1$Gen$Parexpr12AssCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssCond passcondNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        PAssSigns passsignsNode4;
        PAllExpr pallexprNode5;
        {
            // Block
        PExprCalc pexprcalcNode3;
        pexprcalcNode3 = (PExprCalc)nodeArrayList1.get(0);

        pallexprNode2 = new AExprcalcAllExpr(pexprcalcNode3);
        }
        passsignsNode4 = (PAssSigns)nodeArrayList2.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode6;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode7;
        pparenthesesexprNode7 = (PParenthesesExpr)nodeArrayList3.get(0);

        pgeneralexprNode6 = new AParexprGeneralExpr(pparenthesesexprNode7);
        }

        pallexprNode5 = new AGenAllExpr(pgeneralexprNode6);
        }

        passcondNode1 = new AExprsignsAssCond(pallexprNode2, passsignsNode4, pallexprNode5);
        }
	nodeList.add(passcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce AExprsigns$Gen$Parexpr11$Exprcalc2AssCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssCond passcondNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        PAssSigns passsignsNode5;
        PAllExpr pallexprNode6;
        {
            // Block
        PGeneralExpr pgeneralexprNode3;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode4;
        pparenthesesexprNode4 = (PParenthesesExpr)nodeArrayList1.get(0);

        pgeneralexprNode3 = new AParexprGeneralExpr(pparenthesesexprNode4);
        }

        pallexprNode2 = new AGenAllExpr(pgeneralexprNode3);
        }
        passsignsNode5 = (PAssSigns)nodeArrayList2.get(0);
        {
            // Block
        PExprCalc pexprcalcNode7;
        pexprcalcNode7 = (PExprCalc)nodeArrayList3.get(0);

        pallexprNode6 = new AExprcalcAllExpr(pexprcalcNode7);
        }

        passcondNode1 = new AExprsignsAssCond(pallexprNode2, passsignsNode5, pallexprNode6);
        }
	nodeList.add(passcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce AExprsigns$Gen$Parexpr11$Gen$Parexpr12AssCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssCond passcondNode1;
        {
            // Block
        PAllExpr pallexprNode2;
        PAssSigns passsignsNode5;
        PAllExpr pallexprNode6;
        {
            // Block
        PGeneralExpr pgeneralexprNode3;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode4;
        pparenthesesexprNode4 = (PParenthesesExpr)nodeArrayList1.get(0);

        pgeneralexprNode3 = new AParexprGeneralExpr(pparenthesesexprNode4);
        }

        pallexprNode2 = new AGenAllExpr(pgeneralexprNode3);
        }
        passsignsNode5 = (PAssSigns)nodeArrayList2.get(0);
        {
            // Block
        PGeneralExpr pgeneralexprNode7;
        {
            // Block
        PParenthesesExpr pparenthesesexprNode8;
        pparenthesesexprNode8 = (PParenthesesExpr)nodeArrayList3.get(0);

        pgeneralexprNode7 = new AParexprGeneralExpr(pparenthesesexprNode8);
        }

        pallexprNode6 = new AGenAllExpr(pgeneralexprNode7);
        }

        passcondNode1 = new AExprsignsAssCond(pallexprNode2, passsignsNode5, pallexprNode6);
        }
	nodeList.add(passcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce ACondparCondInPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondInPar pcondinparNode1;
        {
            // Block
        TLPar tlparNode2;
        PCond pcondNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pcondinparNode1 = new ACondparCondInPar(tlparNode2, pcondNode3, trparNode4);
        }
	nodeList.add(pcondinparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce AEqualAssSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssSigns passsignsNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        passsignsNode1 = new AEqualAssSigns(tequalNode2);
        }
	nodeList.add(passsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce ANeAssSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssSigns passsignsNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        passsignsNode1 = new ANeAssSigns(tnotequalNode2);
        }
	nodeList.add(passsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce ASmallAssSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssSigns passsignsNode1;
        {
            // Block
        TSmaller tsmallerNode2;
        tsmallerNode2 = (TSmaller)nodeArrayList1.get(0);

        passsignsNode1 = new ASmallAssSigns(tsmallerNode2);
        }
	nodeList.add(passsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce AGreatAssSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssSigns passsignsNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        passsignsNode1 = new AGreatAssSigns(tgreaterNode2);
        }
	nodeList.add(passsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce ASmalleAssSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssSigns passsignsNode1;
        {
            // Block
        TSmallerEq tsmallereqNode2;
        tsmallereqNode2 = (TSmallerEq)nodeArrayList1.get(0);

        passsignsNode1 = new ASmalleAssSigns(tsmallereqNode2);
        }
	nodeList.add(passsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce AGreateAssSigns */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssSigns passsignsNode1;
        {
            // Block
        TGreaterEq tgreatereqNode2;
        tgreatereqNode2 = (TGreaterEq)nodeArrayList1.get(0);

        passsignsNode1 = new AGreateAssSigns(tgreatereqNode2);
        }
	nodeList.add(passsignsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce ATermCond2CondExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondExpr pcondexprNode1;
        {
            // Block
        PTermCond2 ptermcond2Node2;
        ptermcond2Node2 = (PTermCond2)nodeArrayList1.get(0);

        pcondexprNode1 = new ATermCond2CondExpr(ptermcond2Node2);
        }
	nodeList.add(pcondexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce AOrCondExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondExpr pcondexprNode1;
        {
            // Block
        PCondExpr pcondexprNode2;
        PLogicalOr plogicalorNode3;
        PTermCond2 ptermcond2Node4;
        pcondexprNode2 = (PCondExpr)nodeArrayList1.get(0);
        plogicalorNode3 = (PLogicalOr)nodeArrayList2.get(0);
        ptermcond2Node4 = (PTermCond2)nodeArrayList3.get(0);

        pcondexprNode1 = new AOrCondExpr(pcondexprNode2, plogicalorNode3, ptermcond2Node4);
        }
	nodeList.add(pcondexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce ATermCond1TermCond2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermCond2 ptermcond2Node1;
        {
            // Block
        PTermCond1 ptermcond1Node2;
        ptermcond1Node2 = (PTermCond1)nodeArrayList1.get(0);

        ptermcond2Node1 = new ATermCond1TermCond2(ptermcond1Node2);
        }
	nodeList.add(ptermcond2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce AAndTermCond2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermCond2 ptermcond2Node1;
        {
            // Block
        PTermCond2 ptermcond2Node2;
        PLogicalAnd plogicalandNode3;
        PTermCond1 ptermcond1Node4;
        ptermcond2Node2 = (PTermCond2)nodeArrayList1.get(0);
        plogicalandNode3 = (PLogicalAnd)nodeArrayList2.get(0);
        ptermcond1Node4 = (PTermCond1)nodeArrayList3.get(0);

        ptermcond2Node1 = new AAndTermCond2(ptermcond2Node2, plogicalandNode3, ptermcond1Node4);
        }
	nodeList.add(ptermcond2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce AFactorCTermCond1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermCond1 ptermcond1Node1;
        {
            // Block
        PFactorCond pfactorcondNode2;
        pfactorcondNode2 = (PFactorCond)nodeArrayList1.get(0);

        ptermcond1Node1 = new AFactorCTermCond1(pfactorcondNode2);
        }
	nodeList.add(ptermcond1Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new129() /* reduce ANotTermCond1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermCond1 ptermcond1Node1;
        {
            // Block
        PLogicalNot plogicalnotNode2;
        PFactorCond pfactorcondNode3;
        plogicalnotNode2 = (PLogicalNot)nodeArrayList1.get(0);
        pfactorcondNode3 = (PFactorCond)nodeArrayList2.get(0);

        ptermcond1Node1 = new ANotTermCond1(plogicalnotNode2, pfactorcondNode3);
        }
	nodeList.add(ptermcond1Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new130() /* reduce ALogicalAnd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLogicalAnd plogicalandNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        plogicalandNode1 = new ALogicalAnd(tandNode2);
        }
	nodeList.add(plogicalandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new131() /* reduce ALogicalOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLogicalOr plogicalorNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        plogicalorNode1 = new ALogicalOr(torNode2);
        }
	nodeList.add(plogicalorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new132() /* reduce ALogicalNot */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLogicalNot plogicalnotNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        plogicalnotNode1 = new ALogicalNot(tnotNode2);
        }
	nodeList.add(plogicalnotNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new133() /* reduce AAsCondFactorCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactorCond pfactorcondNode1;
        {
            // Block
        PAssCond passcondNode2;
        passcondNode2 = (PAssCond)nodeArrayList1.get(0);

        pfactorcondNode1 = new AAsCondFactorCond(passcondNode2);
        }
	nodeList.add(pfactorcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new134() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new135() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new136() /* reduce ATerminal$HeaderHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PHeaderHelper pheaderhelperNode1;
        pheaderhelperNode1 = (PHeaderHelper)nodeArrayList1.get(0);
	if(pheaderhelperNode1 != null)
	{
	  listNode2.add(pheaderhelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new137() /* reduce ANonTerminal$HeaderHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PHeaderHelper pheaderhelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pheaderhelperNode2 = (PHeaderHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pheaderhelperNode2 != null)
	{
	  listNode3.add(pheaderhelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new138() /* reduce ATerminal$VarDefHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarDefHelper pvardefhelperNode1;
        pvardefhelperNode1 = (PVarDefHelper)nodeArrayList1.get(0);
	if(pvardefhelperNode1 != null)
	{
	  listNode2.add(pvardefhelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new139() /* reduce ANonTerminal$VarDefHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDefHelper pvardefhelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardefhelperNode2 = (PVarDefHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardefhelperNode2 != null)
	{
	  listNode3.add(pvardefhelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new140() /* reduce ATerminal$TypeHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PTypeHelper ptypehelperNode1;
        ptypehelperNode1 = (PTypeHelper)nodeArrayList1.get(0);
	if(ptypehelperNode1 != null)
	{
	  listNode2.add(ptypehelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new141() /* reduce ANonTerminal$TypeHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PTypeHelper ptypehelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypehelperNode2 = (PTypeHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypehelperNode2 != null)
	{
	  listNode3.add(ptypehelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new142() /* reduce ATerminal$FparTypeHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparTypeHelper pfpartypehelperNode1;
        pfpartypehelperNode1 = (PFparTypeHelper)nodeArrayList1.get(0);
	if(pfpartypehelperNode1 != null)
	{
	  listNode2.add(pfpartypehelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new143() /* reduce ANonTerminal$FparTypeHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFparTypeHelper pfpartypehelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpartypehelperNode2 = (PFparTypeHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpartypehelperNode2 != null)
	{
	  listNode3.add(pfpartypehelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new144() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new145() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new146() /* reduce ATerminal$Parameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new147() /* reduce ANonTerminal$Parameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParameter pparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterNode2 = (PParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterNode2 != null)
	{
	  listNode3.add(pparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {18, SHIFT, 5}, },
			{{-1, ERROR, 2}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {5, SHIFT, 1}, {15, SHIFT, 6}, {28, SHIFT, 7}, },
			{{-1, ERROR, 5}, {24, SHIFT, 15}, },
			{{-1, ERROR, 6}, {18, SHIFT, 16}, },
			{{-1, ERROR, 7}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {29, SHIFT, 22}, {31, SHIFT, 23}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 9}, {5, SHIFT, 1}, {15, SHIFT, 6}, {28, SHIFT, 7}, {31, SHIFT, 30}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 14}, {5, SHIFT, 1}, {15, SHIFT, 6}, {28, SHIFT, 7}, },
			{{-1, ERROR, 15}, {12, SHIFT, 33}, {18, SHIFT, 34}, {25, SHIFT, 35}, },
			{{-1, ERROR, 16}, {30, SHIFT, 39}, {32, SHIFT, 40}, },
			{{-1, ERROR, 17}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 47}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 18}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {31, SHIFT, 67}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 19}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 47}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 85}, {24, SHIFT, 71}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 27}, {31, SHIFT, 72}, },
			{{-1, ERROR, 28}, {26, SHIFT, 74}, {33, SHIFT, 75}, },
			{{-1, ERROR, 29}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {29, SHIFT, 78}, {31, SHIFT, 23}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 33}, {18, SHIFT, 80}, },
			{{-1, ERROR, 34}, {30, SHIFT, 39}, {32, SHIFT, 40}, },
			{{-1, ERROR, 35}, {32, SHIFT, 83}, },
			{{-1, ERROR, 36}, {25, SHIFT, 35}, },
			{{-1, ERROR, 37}, {1, SHIFT, 85}, {7, SHIFT, 86}, {10, SHIFT, 87}, },
			{{-1, REDUCE, 6}, {31, SHIFT, 90}, },
			{{-1, ERROR, 39}, {18, SHIFT, 93}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 42}, {1, SHIFT, 85}, {7, SHIFT, 86}, {22, SHIFT, 94}, },
			{{-1, ERROR, 43}, {30, SHIFT, 39}, {32, SHIFT, 40}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 47}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 47}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 97}, {26, SHIFT, 74}, },
			{{-1, ERROR, 52}, {34, SHIFT, 102}, {35, SHIFT, 103}, {38, SHIFT, 104}, {39, SHIFT, 105}, {40, SHIFT, 106}, {41, SHIFT, 107}, {42, SHIFT, 108}, {43, SHIFT, 109}, },
			{{-1, REDUCE, 91}, {2, SHIFT, 112}, {8, SHIFT, 113}, {36, SHIFT, 114}, {37, SHIFT, 115}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 56}, {38, SHIFT, 104}, {39, SHIFT, 105}, {40, SHIFT, 106}, {41, SHIFT, 107}, {42, SHIFT, 108}, {43, SHIFT, 109}, },
			{{-1, ERROR, 57}, {19, SHIFT, 118}, },
			{{-1, ERROR, 58}, {14, SHIFT, 119}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 112}, {11, SHIFT, 121}, },
			{{-1, REDUCE, 124}, {0, SHIFT, 123}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 64}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 66}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 68}, {31, SHIFT, 72}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, ERROR, 69}, {31, SHIFT, 72}, },
			{{-1, ERROR, 70}, {3, SHIFT, 130}, },
			{{-1, ERROR, 71}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {25, SHIFT, 132}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 76}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 77}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 145}, },
			{{-1, ERROR, 80}, {30, SHIFT, 39}, {32, SHIFT, 40}, },
			{{-1, ERROR, 81}, {1, SHIFT, 85}, {7, SHIFT, 86}, {22, SHIFT, 142}, },
			{{-1, ERROR, 82}, {30, SHIFT, 39}, {32, SHIFT, 40}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 84}, {1, SHIFT, 85}, {7, SHIFT, 86}, {10, SHIFT, 87}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 90}, {12, SHIFT, 33}, {18, SHIFT, 34}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 7}, {31, SHIFT, 90}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, {26, SHIFT, 148}, },
			{{-1, ERROR, 96}, {31, SHIFT, 151}, },
			{{-1, REDUCE, 139}, },
			{{-1, ERROR, 98}, {1, SHIFT, 85}, {7, SHIFT, 86}, {22, SHIFT, 94}, },
			{{-1, ERROR, 99}, {25, SHIFT, 153}, {34, SHIFT, 102}, {35, SHIFT, 103}, {38, SHIFT, 104}, {39, SHIFT, 105}, {40, SHIFT, 106}, {41, SHIFT, 107}, {42, SHIFT, 108}, {43, SHIFT, 109}, },
			{{-1, ERROR, 100}, {25, SHIFT, 154}, {38, SHIFT, 104}, {39, SHIFT, 105}, {40, SHIFT, 106}, {41, SHIFT, 107}, {42, SHIFT, 108}, {43, SHIFT, 109}, },
			{{-1, ERROR, 101}, {25, SHIFT, 155}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 110}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 156}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 111}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 116}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 156}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 117}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 120}, {6, SHIFT, 163}, {13, SHIFT, 164}, {16, SHIFT, 165}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {31, SHIFT, 166}, },
			{{-1, REDUCE, 131}, },
			{{-1, ERROR, 122}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 130}, },
			{{-1, ERROR, 124}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 129}, },
			{{-1, ERROR, 126}, {25, SHIFT, 153}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, ERROR, 127}, {25, SHIFT, 154}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 131}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {31, SHIFT, 23}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 133}, {25, SHIFT, 176}, },
			{{-1, REDUCE, 79}, {30, SHIFT, 177}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, REDUCE, 80}, {30, SHIFT, 177}, },
			{{-1, ERROR, 136}, {31, SHIFT, 72}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, ERROR, 137}, {31, SHIFT, 72}, },
			{{-1, ERROR, 138}, {27, SHIFT, 183}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, ERROR, 139}, {27, SHIFT, 183}, },
			{{-1, ERROR, 140}, {1, SHIFT, 85}, {7, SHIFT, 86}, {22, SHIFT, 186}, },
			{{-1, ERROR, 141}, {30, SHIFT, 39}, {32, SHIFT, 40}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, {26, SHIFT, 189}, },
			{{-1, ERROR, 144}, {1, SHIFT, 85}, {7, SHIFT, 86}, {22, SHIFT, 193}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 137}, },
			{{-1, ERROR, 148}, {19, SHIFT, 195}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 32}, {26, SHIFT, 148}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 152}, {31, SHIFT, 197}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 156}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 156}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 92}, {2, SHIFT, 112}, {8, SHIFT, 113}, {36, SHIFT, 114}, {37, SHIFT, 115}, },
			{{-1, REDUCE, 113}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 115}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 163}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 47}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 164}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {31, SHIFT, 199}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, ERROR, 165}, {9, SHIFT, 44}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 47}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 47}, {4, REDUCE, 59}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 168}, {4, SHIFT, 203}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 50}, {4, REDUCE, 62}, },
			{{-1, ERROR, 171}, {31, SHIFT, 72}, },
			{{-1, ERROR, 172}, {26, SHIFT, 74}, {33, SHIFT, 75}, },
			{{-1, REDUCE, 125}, {0, SHIFT, 123}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 177}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 81}, {30, SHIFT, 177}, },
			{{-1, REDUCE, 82}, {30, SHIFT, 177}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, {26, SHIFT, 189}, },
			{{-1, ERROR, 188}, {1, SHIFT, 85}, {7, SHIFT, 86}, {22, SHIFT, 212}, },
			{{-1, ERROR, 189}, {19, SHIFT, 214}, {27, SHIFT, 215}, },
			{{-1, REDUCE, 19}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 21}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, {26, SHIFT, 189}, },
			{{-1, ERROR, 195}, {27, SHIFT, 221}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 198}, {14, SHIFT, 119}, },
			{{-1, REDUCE, 56}, {4, REDUCE, 68}, },
			{{-1, ERROR, 200}, {31, SHIFT, 72}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, ERROR, 201}, {31, SHIFT, 72}, },
			{{-1, ERROR, 202}, {3, SHIFT, 130}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 204}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {31, SHIFT, 23}, },
			{{-1, REDUCE, 51}, {4, REDUCE, 63}, },
			{{-1, ERROR, 206}, {18, SHIFT, 20}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 21}, {24, SHIFT, 66}, {34, SHIFT, 48}, {35, SHIFT, 49}, },
			{{-1, REDUCE, 83}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 9}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 11}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, {26, SHIFT, 189}, },
			{{-1, ERROR, 214}, {27, SHIFT, 232}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 216}, {19, SHIFT, 214}, },
			{{-1, REDUCE, 20}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 24}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 26}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 222}, {6, SHIFT, 163}, {13, SHIFT, 164}, {16, SHIFT, 165}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {31, SHIFT, 166}, },
			{{-1, REDUCE, 54}, {4, REDUCE, 66}, },
			{{-1, REDUCE, 55}, {4, REDUCE, 67}, },
			{{-1, ERROR, 225}, {6, SHIFT, 163}, {13, SHIFT, 164}, {16, SHIFT, 165}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {31, SHIFT, 166}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 227}, {31, SHIFT, 72}, {34, SHIFT, 102}, {35, SHIFT, 103}, },
			{{-1, ERROR, 228}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 10}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 14}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 16}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 25}, {26, SHIFT, 216}, },
			{{-1, ERROR, 234}, {4, SHIFT, 203}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 48}, {4, REDUCE, 60}, },
			{{-1, REDUCE, 49}, {4, REDUCE, 61}, },
			{{-1, REDUCE, 15}, {26, SHIFT, 216}, },
			{{-1, ERROR, 239}, {6, SHIFT, 163}, {13, SHIFT, 164}, {16, SHIFT, 165}, {18, SHIFT, 20}, {21, SHIFT, 21}, {28, SHIFT, 7}, {31, SHIFT, 166}, },
			{{-1, REDUCE, 69}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 91}, {92, 147}, },
			{{-1, 36}, },
			{{-1, 37}, {36, 84}, },
			{{-1, 38}, {90, 146}, },
			{{-1, 88}, {42, 95}, {81, 143}, {98, 95}, {140, 187}, {144, 194}, {188, 213}, },
			{{-1, 96}, {98, 152}, },
			{{-1, 149}, {150, 196}, },
			{{-1, 89}, {84, 145}, },
			{{-1, 190}, {187, 210}, {194, 219}, {213, 230}, },
			{{-1, 191}, {192, 218}, {211, 218}, {217, 218}, {220, 218}, {229, 218}, {231, 218}, {233, 218}, {238, 218}, },
			{{-1, 10}, {14, 31}, },
			{{-1, 11}, },
			{{-1, 41}, {43, 97}, {82, 97}, {141, 97}, },
			{{-1, 42}, {34, 81}, {43, 98}, {80, 140}, {82, 144}, {141, 188}, },
			{{-1, 12}, },
			{{-1, 167}, {7, 24}, {29, 79}, {131, 175}, {204, 226}, {225, 175}, {239, 226}, },
			{{-1, 25}, },
			{{-1, 168}, {222, 234}, {225, 235}, {239, 240}, },
			{{-1, 169}, },
			{{-1, 73}, {68, 128}, {69, 129}, {136, 181}, {137, 182}, {171, 205}, {200, 223}, {201, 224}, {227, 236}, {228, 237}, },
			{{-1, 131}, {202, 225}, },
			{{-1, 120}, {198, 222}, },
			{{-1, 204}, {234, 239}, },
			{{-1, 76}, {172, 206}, },
			{{-1, 26}, {4, 13}, {9, 13}, {14, 32}, {120, 170}, {222, 170}, {225, 170}, {239, 170}, },
			{{-1, 50}, {7, 27}, {29, 27}, {120, 171}, {131, 27}, {204, 27}, {222, 171}, {225, 171}, {239, 171}, },
			{{-1, 133}, },
			{{-1, 178}, {179, 209}, {180, 209}, },
			{{-1, 51}, {7, 28}, {29, 28}, {120, 172}, {131, 28}, {204, 28}, {222, 172}, {225, 172}, {239, 172}, },
			{{-1, 77}, },
			{{-1, 184}, {139, 185}, },
			{{-1, 52}, {18, 68}, {47, 99}, {66, 126}, {71, 134}, {76, 136}, {77, 138}, {111, 158}, {117, 161}, {156, 126}, {164, 200}, {177, 207}, {206, 227}, },
			{{-1, 53}, {110, 157}, },
			{{-1, 54}, {116, 160}, },
			{{-1, 55}, },
			{{-1, 56}, {18, 69}, {47, 100}, {66, 127}, {71, 135}, {76, 137}, {77, 139}, {111, 159}, {117, 162}, {164, 201}, {177, 208}, {206, 228}, },
			{{-1, 110}, },
			{{-1, 57}, },
			{{-1, 116}, },
			{{-1, 58}, {19, 70}, {47, 101}, {163, 198}, {165, 202}, },
			{{-1, 59}, },
			{{-1, 60}, },
			{{-1, 111}, {56, 117}, {100, 117}, },
			{{-1, 61}, },
			{{-1, 62}, {122, 173}, },
			{{-1, 63}, {124, 174}, },
			{{-1, 124}, },
			{{-1, 122}, },
			{{-1, 64}, },
			{{-1, 65}, {64, 125}, },
			{{-1, 14}, },
			{{-1, 92}, },
			{{-1, 43}, {34, 82}, {80, 141}, },
			{{-1, 150}, },
			{{-1, 192}, {187, 211}, {190, 217}, {194, 220}, {210, 229}, {213, 231}, {219, 233}, {230, 238}, },
			{{-1, 29}, },
			{{-1, 179}, {135, 180}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: var name",
			"expecting: EOF",
			"expecting: 'fun', 'var', curly l br",
			"expecting: l par",
			"expecting: 'if', 'return', 'while', var name, constant string, curly l br, curly r br, semicolon",
			"expecting: 'fun', 'var', curly l br, semicolon",
			"expecting: 'fun', 'var', curly l br, EOF",
			"expecting: 'ref', var name, r par",
			"expecting: comma, colon",
			"expecting: 'not', var name, constant, constant character, constant string, l par, plus, minus",
			"expecting: var name, constant, constant character, constant string, l par, semicolon, plus, minus",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', l par, r par, l br, r br, comma, semicolon, assign, plus, minus, mult, div, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', r par, l br, r br, comma, semicolon, assign, plus, minus, mult, div, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: 'else', 'fun', 'if', 'return', 'var', 'while', var name, constant string, curly l br, curly r br, semicolon, EOF",
			"expecting: semicolon",
			"expecting: l br, assign",
			"expecting: colon",
			"expecting: r par",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: r par, semicolon",
			"expecting: 'char', 'int', array",
			"expecting: var name, constant, constant character, constant string, l par, plus, minus",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', r par, r br, comma, semicolon, plus, minus, mult, div, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: constant",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', r par, l br, r br, comma, semicolon, plus, minus, mult, div, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: plus, minus, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: 'then'",
			"expecting: 'and', 'do', 'or', 'then', r par",
			"expecting: 'do', 'then', r par",
			"expecting: 'do', 'or', 'then', r par",
			"expecting: semicolon, plus, minus",
			"expecting: 'do'",
			"expecting: var name, constant, constant character, constant string, l par, r par, plus, minus",
			"expecting: 'else', 'if', 'return', 'while', var name, constant string, curly l br, curly r br, semicolon",
			"expecting: 'fun', 'var', r par, l br, curly l br, semicolon",
			"expecting: 'ref', var name",
			"expecting: l br, semicolon",
			"expecting: r par, plus, minus, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: r par, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: 'if', 'return', 'while', var name, constant string, curly l br, semicolon",
			"expecting: r par, plus, minus",
			"expecting: r par, comma, plus, minus",
			"expecting: r par, comma",
			"expecting: r br, plus, minus",
			"expecting: r br",
			"expecting: r par, l br, semicolon",
			"expecting: 'and', 'do', 'or', 'then', r par, r br, comma, semicolon, equal, not equal, greater, smaller, smaller eq, greater eq",
			"expecting: 'and', 'do', 'or', 'then', r par, plus, minus",
			"expecting: 'else'",
			"expecting: constant, r br",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 3, 3, 7, 3, 8, 9, 10, 11, 10, 12, 13, 14, 5, 5, 5, 5, 15, 16, 5, 3, 3, 7, 1, 9, 17, 18, 19, 20, 1, 21, 9, 21, 9, 22, 23, 23, 10, 24, 24, 23, 25, 26, 23, 23, 23, 27, 24, 28, 29, 30, 31, 29, 29, 22, 29, 22, 5, 32, 15, 33, 34, 35, 5, 22, 22, 22, 22, 14, 5, 9, 21, 9, 19, 19, 36, 36, 6, 6, 6, 37, 20, 20, 9, 15, 38, 15, 9, 21, 39, 40, 18, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 41, 41, 10, 10, 10, 10, 29, 42, 18, 5, 5, 41, 41, 23, 18, 43, 44, 32, 15, 45, 46, 21, 9, 20, 47, 21, 6, 20, 20, 24, 38, 38, 3, 15, 23, 48, 30, 22, 23, 49, 29, 23, 49, 29, 10, 11, 10, 35, 5, 50, 50, 35, 15, 16, 29, 29, 5, 23, 22, 44, 44, 44, 5, 5, 13, 13, 13, 20, 47, 21, 51, 47, 47, 47, 20, 47, 46, 38, 3, 28, 35, 32, 15, 33, 41, 41, 35, 22, 43, 44, 44, 47, 47, 20, 47, 46, 47, 24, 47, 47, 47, 47, 38, 41, 35, 35, 41, 5, 32, 15, 47, 47, 47, 47, 47, 50, 50, 35, 35, 47, 41, 50, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
